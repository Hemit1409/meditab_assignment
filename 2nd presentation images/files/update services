using BusinessModel;
using BusinessServiceInterface;
using Common;
using DataModel;
using DataServiceInterface;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using ChoETL;
using System.Drawing;
using RTBC;
using iTextSharp.text;
using MailKit.Search;
using System.Linq;
using StackExchange.Redis;
using System.Security.Policy;
using Org.BouncyCastle.Utilities.Encoders;
using SureScriptSchema;
using AngleSharp.Common;

namespace BusinessService
{
    public class HemitPatientService : IHemitPatientService
    {
        Lazy<IHemitPatientDataService> _dataService { get; set; }
        Lazy<IHemitPatientAllergyService> _allergydataService { get; set; }
        Lazy<IAutoGenerateNumberService> _autoGenerateInternalService { get; set; }
        Lazy<IStaticMiscValueMapService> _staticMiscValueMapService { get; set; }

        Lazy<IHemitPatientAllergyService> _allergyService { get; set; }
        Lazy<IUserDetailService> _userService { get; set; }
        public HemitPatientService(Lazy<IHemitPatientDataService> dataService, 
            Lazy<IHemitPatientAllergyService> allergydataService, 
            Lazy<IStaticMiscValueMapService> staticMiscValueMapService, Lazy<IAutoGenerateNumberService> autoGenerateInternalService, Lazy<IHemitPatientAllergyService> allergyService, Lazy<IUserDetailService> userService)
        {
            _dataService = dataService;
            _allergydataService=allergydataService;
            _staticMiscValueMapService = staticMiscValueMapService;
            _autoGenerateInternalService = autoGenerateInternalService;
            _allergyService=allergyService;
            _userService = userService;
        }
        public async Task<dynamic> GetById(long hemitpatientid, bool Allergy = true, bool sex = false, bool createdBy = false,IEnumerable < KeyValueBOResponse> staticMiscValueList = null, 
            IEnumerable<KeyValueBOResponse> userDetailList = null,
            IEnumerable<HemitPatientAllergyBOResponse> AllergyList=null)
        {

            HemitPatientResponse response = new HemitPatientResponse();


            response.Patient = _dataService.Value.GetByIdAsync(new HemitPatientFilter() { hemitpatientid = hemitpatientid.ToString() }).Result;

            if (createdBy && ObjectExtentions.IsCleanId(response.Patient.CreatedById))
            {
                if (userDetailList != null)
                {
                    response.CreatedBy = userDetailList.Where(x => x.id == response.Patient.CreatedById).FirstOrDefault();
                    if (response.Patient.CreatedById == response.Patient.LastModifiedById)
                    {
                        response.LastModifiedBy = response.CreatedBy;
                    }
                    else
                    {
                        response.LastModifiedBy = userDetailList.Where(x => x.id == response.Patient.LastModifiedById).FirstOrDefault();
                    }
                }
                else
                {
                    response.CreatedBy = _userService.Value.GetId(response.Patient.CreatedById).Result;
                    if (response.Patient.CreatedById == response.Patient.LastModifiedById)
                    {
                        response.LastModifiedBy = response.CreatedBy;
                    }
                    else
                    {
                        response.LastModifiedBy = _userService.Value.GetId(response.Patient.LastModifiedById).Result;
                    }
                }
            }

            //If sex is required
            if (sex)
            {
                if (staticMiscValueList != null)
                {
                    response.Sex = staticMiscValueList.Where(x => x.id == response.Patient.sexid).FirstOrDefault();
                }
                else
                {
                    response.Sex = _staticMiscValueMapService.Value.GetId(response.Patient.sexid).Result;
                }
            }



            if (Allergy)
            {
                if (AllergyList != null)
                {
                    /*response.Allergy = AllergyList.Where(x => x.hemitpatientid == response.Patient.hemitpatientid).FirstOrDefault();*/
                    var allergyList = _allergydataService.Value.GetList(hemitpatientid: hemitpatientid.ToString(), page: -1, size: 0).Result;
                    response.Allergy = allergyList.Select(x => (HemitPatientAllergyBOResponse)x);
                }
                else {
                    var allergyList = _allergydataService.Value.GetList(hemitpatientid: hemitpatientid.ToString(), page: -1, size: 0).Result;
                    response.Allergy = allergyList.Select(x => (HemitPatientAllergyBOResponse)x);
                    /*var allergyList = _allergydataService.Value.GetListId(patientId: hemitpatientid, page: -1, size: 0).Result;
                    response.Allergy = allergyList.Select(x => (HemitPatientAllergyBOResponse)x);*/
                }
            }


            return await System.Threading.Tasks.Task.FromResult(response); //return patient_list;
        }

        public async Task<IEnumerable<dynamic>> GetList(string hemitpatientid = "", int page = 0, int size = 0, string orderBy = "", string search = ""
            , bool Allergy = true, bool sex = false
            , bool createdBy = false
           )
        {
            IEnumerable<HemitPatient> patientList = null;


            patientList = _dataService.Value.GetAsync(new HemitPatientFilter()
            {
                hemitpatientid = hemitpatientid
            }, page, size, orderBy).Result;


            //List of other objects to reduce database trip in getById
            
            IEnumerable<KeyValueBOResponse> userDetailList = null;
           
            IEnumerable<KeyValueBOResponse> staticMiscValueList = null;
            
            IEnumerable<HemitPatientAllergyBOResponse> AllergyList = null;

            //Null check for patient list
            if (patientList != null && patientList.Count() > 0)
            {
                //Getting address type list
                List<long> userIds = null;
                
                List<long> staticMiscIds = null;
               

                /////////User
                if (createdBy)
                {
                    userIds = userIds != null ? userIds.Concat(patientList.Select(x => x.CreatedById)).Distinct().ToList() : (patientList.Select(x => x.CreatedById)).Distinct().ToList();
                    userIds = userIds != null ? userIds.Concat(patientList.Select(x => x.LastModifiedById)).Distinct().ToList() : (patientList.Select(x => x.LastModifiedById)).Distinct().ToList();
                }
                if (userIds != null && userIds.Count() > 0)
                {
                    userDetailList = _userService.Value.GetId(string.Join(",", userIds.Select(x => x).Distinct())).Result;
                }

                /////////Misc
                
                ///////static misc
                if (sex)
                {
                    staticMiscIds = staticMiscIds != null ? staticMiscIds.Concat(patientList.Select(x => x.sexid)).Distinct().ToList() : (patientList.Select(x => x.sexid)).Distinct().ToList();
                }
                if (staticMiscIds != null && staticMiscIds.Count() > 0)
                {
                    staticMiscValueList = _staticMiscValueMapService.Value.GetId(string.Join(",", staticMiscIds.Select(x => x).Distinct())).Result;
                }

                if (Allergy)
                {
                    var allergyList = _allergydataService.Value.GetList(hemitpatientid: hemitpatientid.ToString(), page: -1, size: 0).Result;
                    AllergyList = allergyList.Select(x => (HemitPatientAllergyBOResponse)x);
                }

            }

            //get list patients with necessary objects
            var response = (from patient in patientList
                            select this.GetById(hemitpatientid: patient.hemitpatientid,Allergy:Allergy,sex:sex, staticMiscValueList: staticMiscValueList, AllergyList: AllergyList).Result).ToList();

            //return list patients
            return await System.Threading.Tasks.Task.FromResult(response);
        }



        public async Task<dynamic> Create(HemitPatientBORequest objPatientBORequest, bool returnResponse = true)
        {
            HemitPatientRequest request = HemitPatientBORequest.Create(objPatientBORequest);
            dynamic result = null;
            long patientId = 0;// allergyId = 0;

            HemitPatientBOResponse response = new HemitPatientBOResponse();

            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions() { IsolationLevel = IsolationLevel.ReadCommitted }))
            {
                //Create a request object
                //HemitPatientRequest request = HemitPatientBORequest.Create(objPatientBORequest);

                int chartNoCount = 0;
                int dupCount = 0;

                //get chart number if null in request
                if (string.IsNullOrEmpty(request.Patient.ChartNumber))
                {
                    request.Patient.ChartNumber = _autoGenerateInternalService.Value.GetAutoGeneratedNumber(AUTOGENERATEENTITYTYPE.PATIENT).Result;
                }
                else
                {
                    chartNoCount = _dataService.Value.GetAsync(new HemitPatientFilter() { ChartNumber = request.Patient.ChartNumber }).Result.Count();
                }


                //HemitPatientBOResponse response = new HemitPatientBOResponse();
                HemitPatientRequestValidator.validate(request:request, chartNoCount:chartNoCount, dupCount: dupCount);


                //Creating Patient
                patientId = (int)_dataService.Value.CreateAsync(request.Patient).Result;


                if (request.Allergy != null)
                {
                    await _allergydataService.Value.Batch(patientId: patientId, objList: request.Allergy);
                }


                if (returnResponse)
                {
                    result = this.GetById((int)patientId).Result;
                }
                else
                {
                    result = patientId;
                }


                //Transaction complete
                ts.Complete();

            }

            

            return await System.Threading.Tasks.Task.FromResult(result);
        }


        public async Task<IEnumerable<HemitPatientBOResponse>> Filter(HemitPatientSearchBORequest objPatientBORequest, int page = 1, int size = 20, string orderby = "", bool isShowCount = false)
        {
            List<HemitPatientBOResponse> result = new List<HemitPatientBOResponse>();
            

            //Create a new transaction 

            var lstPatient = _dataService.Value.GetPatientFilter(new HemitPatientDataFilter()
            {
                Size = size,//request.Patient.pagesize,
                Page = page,//request.Patient.PageNumber,
                hemitpatientid = objPatientBORequest.uID,
                FirstName = objPatientBORequest.firstName,
                LastName = objPatientBORequest.lastName,
               //sex = objPatientBORequest.gender,
                dob = objPatientBORequest.dOB.ToString(),
               

            });
            if (isShowCount)
            {
                var objBOResponse = new HemitPatientBOResponse();
                objBOResponse.count = lstPatient.Count;
                result.Add(objBOResponse);
            }
            else if (lstPatient != null && lstPatient.Any())
            {
                result = HemitPatientBOResponse.Create(lstPatient: lstPatient);
            }

           

            return await System.Threading.Tasks.Task.FromResult(result);

            


        }

        public async Task<IEnumerable<dynamic>> GetListId(int page = 1, int size = 20, string orderBy = "", int patientId = 0, string search = "", long? facilityId = null, bool isMovedInResident = false)
        {
            var objSearch = ObjectExtentions.SplitSearch(search);

            var lstPatient = _dataService.Value.GetListAsync(new HemitPatientListFilter()
            {
                hemitpatientid = patientId,
                FirstName = objSearch.FirstName,
                LastName = objSearch.LastName,
                ChartNumber = objSearch.ChartNumber,
                dob = objSearch.DOB.ToDateString(),
                searchby = objSearch.PatientSearch,
                
            }, page: page, size: size, orderBy: orderBy).Result;




            var response = KeyValueBOResponse.Create(lstPatient, TABLE.PATIENT);
            return await System.Threading.Tasks.Task.FromResult(response);


        }


        public async Task<dynamic> Update(long hemitpatientid, HemitPatientBORequest objPatientRequest, bool returnResponse = true)
        {
            dynamic result = null;
            objPatientRequest.id = (int)hemitpatientid;
            //Create a new transaction 
            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions() { IsolationLevel = IsolationLevel.ReadCommitted }))
            {
                //Creating a request object
                HemitPatientRequest request = HemitPatientBORequest.Create(objPatientRequest);
                
                //Get id of the record to be updated
                request.Patient.hemitpatientid = (int)hemitpatientid;

                int chartNoCount = 0;
                int dupCount = 0;

                if (string.IsNullOrEmpty(request.Patient.ChartNumber))
                {
                    request.Patient.ChartNumber = _autoGenerateInternalService.Value.GetAutoGeneratedNumber(AUTOGENERATEENTITYTYPE.PATIENT).Result;
                }
                else
                {
                    chartNoCount = _dataService.Value.GetAsync(new HemitPatientFilter() { ChartNumber = request.Patient.ChartNumber }).Result.Count();
                }



                HemitPatientRequestValidator.validate(request: request, chartNoCount: chartNoCount, dupCount: dupCount);


                PatientBOResponse response = new PatientBOResponse();


                hemitpatientid = _dataService.Value.UpdateAsync(request.Patient).Result;

                if (request.Allergy != null)
                {
                    await _allergydataService.Value.Batch(patientId: hemitpatientid, objList: request.Allergy);
                }

                //Transaction complete
                ts.Complete();
            }

            //Return Updated Patient
            if (returnResponse)
            {
                result = this.GetById((int)hemitpatientid).Result;
            }
            else
            {
                result = hemitpatientid;
            }

            return await System.Threading.Tasks.Task.FromResult(result);

        }




        public async Task<dynamic> Delete(long hemitpatientid, dynamic objRequest, bool returnResponse = false, bool isUpdatePFPatient = false)
        {
            

            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions() { IsolationLevel = IsolationLevel.ReadCommitted }))
            {

                if (hemitpatientid != 0)
                {
                    //update patient
                    

                    //get value
                    var allergylist = _allergydataService.Value.GetListId(patientId:hemitpatientid,0,0).Result.ToList();



                    for(int index=0;index< allergylist.Count;index++)
                    {
                        var query= _allergydataService.Value.Delete(patientId: allergylist[index].hemitpatientallergyid, objBORequest: null).Result;
                    }


                    DataModel.DeleteRequest request=new DataModel.DeleteRequest(); //= HemitPatientBORequest.Create(JsonConvert.DeserializeObject<HemitPatientBORequest>(objRequest.ToString()));

                  
                        request.Id = hemitpatientid;

                        await _dataService.Value.DeleteAsync(request);

                    

                    //complete transaction
                    ts.Complete();
                }
            }

            //return result
            if (returnResponse)
            {
                return await this.GetById(hemitpatientid: (int)hemitpatientid);
            }
            else
            {
                return await System.Threading.Tasks.Task.FromResult(hemitpatientid);
            }
        }



        




    }
    
}
