using BusinessModel;
using BusinessServiceInterface;
using Common;
using DataModel;
using DataServiceInterface;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using ChoETL;
using System.Drawing;
using RTBC;
using iTextSharp.text;
using MailKit.Search;
using System.Linq;
using StackExchange.Redis;
using System.Security.Policy;
using Org.BouncyCastle.Utilities.Encoders;
using SureScriptSchema;
using AngleSharp.Common;

namespace BusinessService
{
    public class HemitPatientService : IHemitPatientService
    {
        Lazy<IHemitPatientDataService> _dataService { get; set; }
        Lazy<IHemitPatientAllergyService> _patientAllergyService { get; set; }
        Lazy<IAutoGenerateNumberService> _autoGenerateInternalService { get; set; }
        Lazy<IStaticMiscValueMapService> _staticMiscValueMapService { get; set; }

        Lazy<IHemitPatientAllergyService> _allergyService { get; set; }
        Lazy<IUserDetailService> _userService { get; set; }

        /// <summary>
        /// Constructor of service
        /// </summary>
        /// <param name="dataService"></param>
        /// <param name="userService"></param>
        /// <param name="staticMiscValueMapService"></param>
        /// <param name="autoGenerateInternalService"></param>
        
        public HemitPatientService(Lazy<IHemitPatientDataService> dataService, 
            Lazy<IHemitPatientAllergyService> patientAllergyService, 
            Lazy<IStaticMiscValueMapService> staticMiscValueMapService, Lazy<IAutoGenerateNumberService> autoGenerateInternalService, Lazy<IHemitPatientAllergyService> allergyService, Lazy<IUserDetailService> userService)
        {
            _dataService = dataService;
            _patientAllergyService = patientAllergyService;
            _staticMiscValueMapService = staticMiscValueMapService;
            _autoGenerateInternalService = autoGenerateInternalService;
            _allergyService=allergyService;
            _userService = userService;
        }

        /// <summary>
        /// To get patient by id
        /// </summary>
        /// <param name="hemitPatientId">Id of patient </param>
        /// <param name="sex">flag for sex</param>
        /// <param name="createdBy">flag for createdBy</param>
        /// <param name="userDetailList">list of user detail</param>
        /// <param name="staticMiscValueList">list of static misc value</param>
        /// <returns>Object of patient type </returns>
        public async Task<dynamic> GetById(long hemitPatientId, bool Allergy = true, bool sex = false, bool createdBy = false,IEnumerable < KeyValueBOResponse> staticMiscValueList = null, 
            IEnumerable<KeyValueBOResponse> userDetailList = null,
            IEnumerable<HemitPatientAllergyBOResponse> AllergyList=null)
        {

            HemitPatientResponse response = new HemitPatientResponse();


            response.Patient = _dataService.Value.GetByIdAsync(new HemitPatientFilter() { HemitPatientId = hemitPatientId.ToString() }).Result;

            if (createdBy && ObjectExtentions.IsCleanId(response.Patient.CreatedById))
            {
                if (userDetailList != null)
                {
                    response.CreatedBy = userDetailList.Where(x => x.id == response.Patient.CreatedById).FirstOrDefault();
                    if (response.Patient.CreatedById == response.Patient.LastModifiedById)
                    {
                        response.LastModifiedBy = response.CreatedBy;
                    }
                    else
                    {
                        response.LastModifiedBy = userDetailList.Where(x => x.id == response.Patient.LastModifiedById).FirstOrDefault();
                    }
                }
                else
                {
                    response.CreatedBy = _userService.Value.GetId(response.Patient.CreatedById).Result;
                    if (response.Patient.CreatedById == response.Patient.LastModifiedById)
                    {
                        response.LastModifiedBy = response.CreatedBy;
                    }
                    else
                    {
                        response.LastModifiedBy = _userService.Value.GetId(response.Patient.LastModifiedById).Result;
                    }
                }
            }

            //If sex is required
            if (sex)
            {
                if (staticMiscValueList != null)
                {
                    response.Sex = staticMiscValueList.Where(x => x.id == response.Patient.SexId).FirstOrDefault();
                }
                else
                {
                    response.Sex = _staticMiscValueMapService.Value.GetId(response.Patient.SexId).Result;
                }
            }



            if (Allergy)
            {
                if (AllergyList != null)
                {
                    response.Allergy = (IEnumerable<HemitPatientAllergyBOResponse>)AllergyList.Where(x => x.hemitpatientid == response.Patient.HemitPatientId).FirstOrDefault();

                }
                else
                {
                    /*var allergyList = _allergydataService.Value.GetList(hemitpatientid: hemitpatientid.ToString(), page: -1, size: 0).Result;
                    response.Allergy = allergyList.Select(x => (HemitPatientAllergyBOResponse)x);*/
                    var allergyList = _patientAllergyService.Value.GetListId(hemitpatientid: response.Patient.HemitPatientId, page: -1, size: 0).Result;
                    response.Allergy = allergyList.Select(x => (HemitPatientAllergyBOResponse)x); 
                }
            }


            return await System.Threading.Tasks.Task.FromResult(response); 
        }

        /// <summary>
        /// To get list of Patient 
        /// </summary>
        /// <param name="page">Page number </param>
        /// <param name="size">number of records in each page</param>
        /// <param name="orderBy">to sort records according to specified field</param>
        /// <param name="search">To search Immunizations by Code and Name </param>
        /// <param name="hemitpatientid">id of patient</param>
        /// <param name="Allergy">flag for allergy</param>
        /// <param name="sex">flag for sex</param>
        /// <param name="createdBy">flag for createdBy</param>
        /// <returns>List of object type Patient </returns>
        public async Task<IEnumerable<dynamic>> GetList(string hemitpatientid = "", int page = 0, int size = 0, string orderBy = "", string search = ""
            , bool Allergy = true, bool sex = false
            , bool createdBy = false
           )
        {
            IEnumerable<HemitPatient> patientList = null;


            patientList = _dataService.Value.GetAsync(new HemitPatientFilter()
            {
                HemitPatientId = hemitpatientid
            }, page, size, orderBy).Result;


            //List of other objects to reduce database trip in getById
            
            IEnumerable<KeyValueBOResponse> userDetailList = null;
           
            IEnumerable<KeyValueBOResponse> staticMiscValueList = null;
            
            IEnumerable<HemitPatientAllergyBOResponse> AllergyList = null;

            //Null check for patient list
            if (patientList != null && patientList.Count() > 0)
            {
                //Getting address type list
                List<long> userIds = null;
                
                List<long> staticMiscIds = null;
               

                /////////User createdby and lastmodifiedby details fetched
                if (createdBy)
                {
                    userIds = userIds != null ? userIds.Concat(patientList.Select(x => x.CreatedById)).Distinct().ToList() : (patientList.Select(x => x.CreatedById)).Distinct().ToList();
                    userIds = userIds != null ? userIds.Concat(patientList.Select(x => x.LastModifiedById)).Distinct().ToList() : (patientList.Select(x => x.LastModifiedById)).Distinct().ToList();
                }
                if (userIds != null && userIds.Count() > 0)
                {
                    userDetailList = _userService.Value.GetId(string.Join(",", userIds.Select(x => x).Distinct())).Result;
                }

                
                ///////static misc value for sex data of patient
                if (sex)
                {
                    staticMiscIds = staticMiscIds != null ? staticMiscIds.Concat(patientList.Select(x => x.SexId)).Distinct().ToList() : (patientList.Select(x => x.SexId)).Distinct().ToList();
                }
                if (staticMiscIds != null && staticMiscIds.Count() > 0)
                {
                    staticMiscValueList = _staticMiscValueMapService.Value.GetId(string.Join(",", staticMiscIds.Select(x => x).Distinct())).Result;
                }

                if (Allergy)
                {
                    foreach (var x in patientList)
                    {
                        /*var allergyList = _patientAllergyService.Value.GetList(hemitpatientid: x.HemitPatientId.ToString(), page: -1, size: 0).Result;
                        AllergyList = allergyList.Select(x => (HemitPatientAllergyBOResponse)x);*/
                        var allergyList = _patientAllergyService.Value.GetListId(hemitpatientid: x.HemitPatientId, page: -1, size: 0).Result;
                        AllergyList = allergyList.Select(x => (HemitPatientAllergyBOResponse)x);
                    }
                }

            }

            //get list patients with necessary objects
            var response = (from patient in patientList
                            select this.GetById(hemitPatientId: patient.HemitPatientId,Allergy:Allergy,sex:sex, staticMiscValueList: staticMiscValueList, AllergyList: AllergyList).Result).ToList();

            //return list patients
            return await System.Threading.Tasks.Task.FromResult(response);
        }


        /// <summary>
        /// To Create a new Patient
        /// </summary>
        /// <param name="objPatientBORequest">Request Object containing Patient detail </param>
        /// <param name="returnResponse">To return patient race map object response </param>
        /// <returns>Newly created object of Patient type </returns>
        public async Task<dynamic> Create(HemitPatientBORequest objPatientBORequest, bool returnResponse = true)
        {
            HemitPatientRequest request = HemitPatientBORequest.Create(objPatientBORequest);
            dynamic result = null;
            long patientId = 0;// allergyId = 0;

            HemitPatientBOResponse response = new HemitPatientBOResponse();

            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions() { IsolationLevel = IsolationLevel.ReadCommitted }))
            {
                //Create a request object
                //HemitPatientRequest request = HemitPatientBORequest.Create(objPatientBORequest);

                int chartNoCount = 0;
                int dupCount = 0;

                //get chart number if null in request
                if (string.IsNullOrEmpty(request.Patient.ChartNumber))
                {
                    request.Patient.ChartNumber = _autoGenerateInternalService.Value.GetAutoGeneratedNumber(AUTOGENERATEENTITYTYPE.PATIENT).Result;
                }
                else
                {
                    chartNoCount = _dataService.Value.GetAsync(new HemitPatientFilter() { ChartNumber = request.Patient.ChartNumber }).Result.Count();
                }


                //HemitPatientBOResponse response = new HemitPatientBOResponse();
                HemitPatientRequestValidator.validate(request:request, chartNoCount:chartNoCount, dupCount: dupCount);


                //Creating Patient
                patientId = (int)_dataService.Value.CreateAsync(request.Patient).Result;


                if (request.Allergy != null)
                {
                    await _patientAllergyService.Value.Batch(patientId: patientId, objList: request.Allergy);
                }


                if (returnResponse)
                {
                    result = this.GetById((int)patientId).Result;
                }
                else
                {
                    result = patientId;
                }


                //Transaction complete
                ts.Complete();

            }

            

            return await System.Threading.Tasks.Task.FromResult(result);
        }

        /// <summary>
        /// To get list of patient with filter criteria
        /// </summary>
        /// <param name="objPatientBORequest">request object containing filter criteria</param>
        /// <param name="page">Page number </param>
        /// <param name="size">number of records in each page</param>
        /// <param name="orderby">to sort records according to specified field</param>
        /// <returns></returns>
        public async Task<IEnumerable<HemitPatientBOResponse>> Filter(HemitPatientSearchBORequest objPatientBORequest, int page = 1, int size = 20, string orderby = "", bool isShowCount = false)
        {
            List<HemitPatientBOResponse> result = new List<HemitPatientBOResponse>();
            

            //Create a new transaction 

            var lstPatient = _dataService.Value.GetPatientFilter(new HemitPatientDataFilter()
            {
                Size = size,//request.Patient.pagesize,
                Page = page,//request.Patient.PageNumber,
                hemitpatientid = objPatientBORequest.uID,
                FirstName = objPatientBORequest.firstName,
                LastName = objPatientBORequest.lastName,
                dob = objPatientBORequest.dOB.ToString(),
               

            });
            if (isShowCount)
            {
                var objBOResponse = new HemitPatientBOResponse();
                objBOResponse.count = lstPatient.Count;
                result.Add(objBOResponse);
            }
            else if (lstPatient != null && lstPatient.Any())
            {
                result = HemitPatientBOResponse.Create(lstPatient: lstPatient);
            }

           

            return await System.Threading.Tasks.Task.FromResult(result);

            


        }

        /// <summary>
        /// To get list of KeyValue Objects of Patient Type
        /// </summary>
        /// <param name="page">Page Number</param>
        /// <param name="size">Number of records in each page</param>
        /// <param name="orderBy">to sort records according to specified field</param>
        /// <param name="search">To search patient by firstname and lastname</param>
        /// <returns>List of KeyValue Objects of patient Type </returns>
        public async Task<IEnumerable<dynamic>> GetListId(int page = 1, int size = 20, string orderBy = "", int hemitPatientId = 0, string search = "", long? facilityId = null, bool isMovedInResident = false)
        {
            var objSearch = ObjectExtentions.SplitSearch(search);

            var lstPatient = _dataService.Value.GetListAsync(new HemitPatientListFilter()
            {
                HemitPatientId = hemitPatientId,
                FirstName = objSearch.FirstName,
                LastName = objSearch.LastName,
                ChartNumber = objSearch.ChartNumber,
                dob = objSearch.DOB.ToDateString(),
                SearchBy = objSearch.PatientSearch,
                
            }, page: page, size: size, orderBy: orderBy).Result;

            var response = KeyValueBOResponse.Create(lstPatient, TABLE.PATIENT);
            return await System.Threading.Tasks.Task.FromResult(response);

        }

        /// <summary>
        /// To update an existing Patient
        /// </summary>
        /// <param name="hemitpatientid">Id of the Patient to be updated</param>
        /// <param name="objPatientRequest">Request Object containing updated Patient details </param>
        /// <param name="returnResponse">To return patient object response </param>
        /// <returns>Updated Object of Patient Type </returns>
        public async Task<dynamic> Update(long hemitpatientid, HemitPatientBORequest objPatientRequest, bool returnResponse = true)
        {
            dynamic result = null;
            objPatientRequest.id = (int)hemitpatientid;
            //Create a new transaction 
            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions() { IsolationLevel = IsolationLevel.ReadCommitted }))
            {
                //Creating a request object
                HemitPatientRequest request = HemitPatientBORequest.Create(objPatientRequest);
                
                //Get id of the record to be updated
                request.Patient.HemitPatientId = (int)hemitpatientid;

                int chartNoCount = 0;
                int dupCount = 0;

                if (string.IsNullOrEmpty(request.Patient.ChartNumber))
                {
                    request.Patient.ChartNumber = _autoGenerateInternalService.Value.GetAutoGeneratedNumber(AUTOGENERATEENTITYTYPE.PATIENT).Result;
                }
                else
                {
                    chartNoCount = _dataService.Value.GetAsync(new HemitPatientFilter() { ChartNumber = request.Patient.ChartNumber }).Result.Count();
                }



                HemitPatientRequestValidator.validate(request: request, chartNoCount: chartNoCount, dupCount: dupCount);


                //PatientBOResponse response = new PatientBOResponse();


                hemitpatientid = _dataService.Value.UpdateAsync(request.Patient).Result;

                if (request.Allergy != null)
                {
                    await _patientAllergyService.Value.Batch(patientId: hemitpatientid, objList: request.Allergy);
                }

                //Transaction complete
                ts.Complete();
            }

            //Return Updated Patient
            if (returnResponse)
            {
                result = this.GetById((int)hemitpatientid).Result;
            }
            else
            {
                result = hemitpatientid;
            }

            return await System.Threading.Tasks.Task.FromResult(result);

        }


        /// <summary>
        /// To delete an existing Patient
        /// </summary>
        /// <param name="hemitpatientid">Id of the Patient to be deleted </param>
        /// <param name="objRequest">Request Object containing Id</param>
        /// <returns>hemitpatientid return with success/ record has been deleted already </returns>

        public async Task<dynamic> Delete(long hemitpatientid, dynamic objRequest, bool returnResponse = false, bool isUpdatePFPatient = false)
        {
            

            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions() { IsolationLevel = IsolationLevel.ReadCommitted }))
            {

                if (hemitpatientid != 0)
                {
                    
                    //get value
                    var allergylist = _patientAllergyService.Value.GetListId(hemitpatientid:hemitpatientid,0,0).Result.ToList();



                    for(int index=0;index< allergylist.Count;index++)
                    {
                        var query= _patientAllergyService.Value.Delete(patientId: allergylist[index].hemitpatientallergyid, objBORequest: null).Result;
                    }


                    BusinessModel.DeleteRequest request=new BusinessModel.DeleteRequest(); 

                  
                        request.id = hemitpatientid;

                    //await _dataService.Value.DeleteAsync(request);

                    long deleted = _dataService.Value.DeleteAsync(BusinessModel.DeleteRequest.Create(request)).Result;

                    //complete transaction
                    ts.Complete();
                    return await System.Threading.Tasks.Task.FromResult(deleted);
                }
            }

            //return result
            if (returnResponse)
            {
                return await this.GetById(hemitPatientId: (int)hemitpatientid);
            }
            else
            {
                return await System.Threading.Tasks.Task.FromResult(hemitpatientid);
            }
        }

    }
    
}
