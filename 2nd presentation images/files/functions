CREATE OR REPLACE FUNCTION public.uspnewhemitpatientsread(_hemitpatientid text DEFAULT NULL::text, _isactive boolean DEFAULT true, _firstname character varying DEFAULT ''::character varying, _middlename character varying DEFAULT ''::character varying, _lastname character varying DEFAULT ''::character varying, _gender character varying DEFAULT ''::character varying, _sexid character varying DEFAULT NULL::character varying, _dob character varying DEFAULT NULL::character varying, _allergyname character varying DEFAULT ''::character varying, _orderby character varying DEFAULT 'HemitPatient.hemitpatientid'::character varying, _ordertype character varying DEFAULT 'ASC'::character varying, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying, _clientidin character varying DEFAULT NULL::character varying, _clientidnotin character varying DEFAULT NULL::character varying, _tpauserid character varying DEFAULT NULL::character varying, _searchby character varying DEFAULT NULL::character varying, _page integer DEFAULT 1, _size integer DEFAULT 20,_chartnumber varchar default null)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$
declare 
--_query varchar :='';
 _query varchar:= 'select HemitPatient.PK as PK,HemitPatient.hemitpatientid as hemitpatientid,chartnumber,firstname , lastname,middlename, gender.code as gendercode,gender.description as genderdescription,dob,HemitPatient.sexid as sexid,HemitPatient.createdbyid as CreatedById,HemitPatient.lastmodifiedbyid as LastModifiedById from HemitPatient 
left join staticmiscvaluemap as gender on gender.staticmiscvaluemapid = HemitPatient.sexid
'; 
v_queryStatement TEXT;
 begin
     _query := _query || ' where HemitPatient.isdeleted=false and (HemitPatient.hemitpatientid  = ANY(STRING_TO_ARRAY('''||$1||''', '','')::bigint[]) )';--||;--' LIMIT 1';
    v_queryStatement =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| _query ||' ) A';
     raise notice '%',v_queryStatement;
     return query execute v_queryStatement using _hemitpatientid,_FirstName,_LastName,_MiddleName,_SexId,_DOB;
 end
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientsreadlist(_page integer DEFAULT 1, _size integer DEFAULT 20, _hemitpatientid integer DEFAULT NULL::integer, _firstname character varying DEFAULT ''::character varying, _middlename character varying DEFAULT ''::character varying, _lastname character varying DEFAULT ''::character varying, _gender character varying DEFAULT ''::character varying, _sexid character varying DEFAULT NULL::character varying, _dob character varying DEFAULT NULL::character varying, _allergyname character varying DEFAULT ''::character varying, _orderby character varying DEFAULT 'HemitPatient.hemitpatientid'::character varying, _ordertype character varying DEFAULT 'ASC'::character varying, _searchby character varying DEFAULT NULL::character varying, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying, _clientidin character varying DEFAULT NULL::character varying, _clientidnotin character varying DEFAULT NULL::character varying, _tpauserid character varying DEFAULT NULL::character varying, _chartnumber character varying DEFAULT NULL::character varying, _isactive boolean DEFAULT true)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$
declare 
_count INT; 
initialquery varchar(2000) := '';
initialquery2 varchar(2000) := '';
v_countStatement varchar(3000) := '';

begin

initialquery2 = ''
	|| case when $3 != 0 then ' and HemitPatient.hemitpatientid = '''||$3||'''' else '' end 
	|| case when $4 != '' then ' and HemitPatient.firstname = '''||$4||'''' else '' end 
	||case when $6 != '' then ' and HemitPatient.lastname = '''||$6||'''' else '' end 
	|| case when $9 != '' then ' and HemitPatient.dob = '''||$9::date||'''' else ''  end
	||case when $13 != '' then ' and (HemitPatient.firstname = '''||$13||''' or HemitPatient.lastname = '''||$13||'''or HemitPatient.chartnumber = '''||$13||''')' else '' end;

v_countStatement = CONCAT(' SELECT count(HemitPatient.hemitpatientid) FROM HemitPatient WHERE 1 = 1 ',initialquery2);
execute v_countStatement  using 
_Page,_Size,_hemitpatientid,_FirstName,_LastName,_gender,_DOB,_allergyname,_orderby,_ordertype INTO _count;

initialquery = 'Select '||_count||' AS Count, HemitPatient.hemitpatientid as Id, HemitPatient.firstname, HemitPatient.lastname, HemitPatient.dob, HemitPatient.chartnumber as chartnumber,gender.code as gendercode,gender.description as genderdescription,
DENSE_RANK() OVER (ORDER BY HemitPatient.hemitpatientid) as denserow From HemitPatient left join staticmiscvaluemap as gender on gender.staticmiscvaluemapid = HemitPatient.sexid 
where HemitPatient.isdeleted=false and 1=1 ';

	initialquery := 'select * from(' || initialquery
	|| case when $3 != 0 then ' and HemitPatient.hemitpatientid = '''||$3||'''' else '' end 
	|| case when $4 != '' then ' and HemitPatient.firstname = '''||$4||'''' else '' end 
	||case when $6 != '' then ' and HemitPatient.lastname = '''||$6||'''' else '' end 
	|| case when $9 != '' then ' and HemitPatient.dob = '''||$9::date||'''' else ''  end
	||case when $13 != '' then ' and (HemitPatient.firstname = '''||$13||''' or HemitPatient.lastname = '''||$13||'''or HemitPatient.chartnumber = '''||$13||''')' else '' end
	||' ORDER BY '|| $11|| ' ' || $12
	||')as table1 where denserow<='||$2||'*'||$1 ||'and denserow>'||$2||'*'||($1-1) ;--||'group by denserow';

initialquery =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| initialquery || ' ) A'; 
raise notice 'sql %' , initialquery;
	return query execute initialquery using _Page,_Size,_hemitpatientid,_FirstName,_LastName,_gender,_DOB,_allergyname,_orderby,_ordertype;
end;
$function$
;


CREATE OR REPLACE FUNCTION public.hemituspgetpatientfilter(_page integer DEFAULT 1, _size integer DEFAULT 20, _hemitpatientid integer DEFAULT NULL::integer, _firstname character varying DEFAULT ''::character varying, _middlename character varying DEFAULT ''::character varying, _lastname character varying DEFAULT ''::character varying, _sex character varying DEFAULT ''::character varying, _sexid character varying DEFAULT NULL::character varying, _dob character varying DEFAULT NULL::character varying, _allergyname character varying DEFAULT ''::character varying, _orderby character varying DEFAULT 'HemitPatient.hemitpatientid'::character varying, _ordertype character varying DEFAULT 'ASC'::character varying, _searchby character varying DEFAULT NULL::character varying, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying, _clientidin character varying DEFAULT NULL::character varying, _clientidnotin character varying DEFAULT NULL::character varying, _tpauserid character varying DEFAULT NULL::character varying, _chartnumber character varying DEFAULT NULL::character varying, _isactive boolean DEFAULT true)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$
declare 
_count INT; 
initialquery varchar(2000) := 'Select HemitPatient.hemitpatientid as hemitpatientid, HemitPatient.firstname, HemitPatient.lastname, HemitPatient.middlename, HemitPatient.dob, HemitPatient.chartnumber as chartnumber,HemitPatient.sexid as hemitsexid,gender.code as sex,gender.description as description,
DENSE_RANK() OVER (
		ORDER BY HemitPatient.hemitpatientid
	) as denserow 
From
    HemitPatient
    left join staticmiscvaluemap as gender on gender.staticmiscvaluemapid = HemitPatient.sexid

where HemitPatient.isdeleted=false and 1=1 ';
initialquery2 varchar(2000) := '';
v_countStatement varchar(3000) := '';
 
begin

	
	initialquery := 'select * from(' || initialquery
	|| case when $3 != 0 then ' and HemitPatient.hemitpatientid = '''||$3||'''' else '' end 
	|| case when $4 != '' then ' and HemitPatient.firstname = '''||$4||'''' else '' end 
	||case when $6 != '' then ' and HemitPatient.lastname = '''||$6||'''' else '' end 
	--||case when $8 != '0' then ' and HemitSex.sex = '''||$8||'''' else ''  end
	|| case when $9 != '' then ' and HemitPatient.dob = '''||$9::date||'''' else ''  end
	--||case when $10 != '' then ' and hemitallergy.AllergyName = '''||$10||'''' else '' end
	||case when $13 != '' then ' and (HemitPatient.firstname = '''||$13||''' or HemitPatient.lastname = '''||$13||''')' else '' end
	||' ORDER BY '|| $11|| ' ' || $12
	/*||
	' OFFSET (('||$1||'-1) *'|| $2||')'*/
	||')as table1 where denserow<='||$2||'*'||$1 ||'and denserow>'||$2||'*'||($1-1) ;--||'group by denserow';


initialquery =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| initialquery || ' ) A'; 
raise notice 'sql %' , initialquery;
	return query execute initialquery using _Page,_Size,_hemitpatientid,_FirstName,_LastName,_sex,_DOB,_allergyname,_orderby,_ordertype;
end;
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientallergycreate(_hemitpatientid integer, _hemitallergyid integer, _note character varying, _allergyname character varying DEFAULT NULL::character varying, _hemitpatientallergyid integer DEFAULT NULL::integer, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
primarykey integer;
BEGIN
    INSERT INTO HemitPatientAllergy(hemitpatientid,hemitallergyid,note) VALUES(_hemitpatientid,_hemitallergyid,_note) returning hemitpatientallergyid into primarykey; 
    return primarykey;
--   (SELECT patient_id FROM Patients ORDER BY created_on DESC LIMIT 1);  
End;
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientallergydelete(_hemitpatientallergyid integer DEFAULT NULL::integer, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying, _lastmodifieddate character varying DEFAULT NULL::character varying, _clientid character varying DEFAULT NULL::character varying, _machineid character varying DEFAULT NULL::character varying, _oldsystemid character varying DEFAULT NULL::character varying, _requestid character varying DEFAULT NULL::character varying, _issample character varying DEFAULT NULL::character varying)
 RETURNS TABLE(id bigint)
 LANGUAGE plpgsql
AS $function$
declare
deletedkey integer;
_query varchar :='';
 --_query varchar:= 'update HemitPatientAllergy set isdeleted=true'; 
 
 begin
     _query := 'update HemitPatientAllergy set isdeleted=true where hemitpatientallergyid='||$1||' returning hemitpatientallergyid';
     raise notice '%',_query;
    return query execute _query using _hemitpatientallergyid;
 end;
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientallergyread(_hemitpatientid integer, _hemitallergyid integer DEFAULT NULL::integer, _note character varying DEFAULT NULL::character varying, _allergyname character varying DEFAULT NULL::character varying, _hemitpatientallergyid integer DEFAULT NULL::integer, _page integer DEFAULT 0, _size integer DEFAULT 0, _clientidin character varying DEFAULT NULL::character varying, _clientidnotin character varying DEFAULT NULL::character varying, _tpauserid character varying DEFAULT NULL::character varying, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying, _orderby character varying DEFAULT NULL::character varying)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$
declare 
--_query varchar :='';
 _query varchar:= 'select HemitPatient.hemitpatientid,hemitallergy.name,HemitPatientAllergy.note,hemitallergy.code,HemitPatientAllergy.hemitpatientallergyid,HemitPatientAllergy.hemitallergyid from HemitPatient 
LEFT JOIN HemitPatientAllergy ON HemitPatient.hemitpatientid = HemitPatientAllergy.hemitpatientid 
LEFT JOIN hemitallergy ON HemitPatientAllergy.hemitallergyid = hemitallergy.hemitallergyid'; 
 v_queryStatement TEXT;
 begin
     _query := _query || ' where HemitPatient.isdeleted=false and HemitPatient.hemitpatientid='||$1;--||;--' LIMIT 1';
     raise notice '%',_query;
     v_queryStatement =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| _query || ' ) A';  
     return query execute v_queryStatement using _hemitpatientid;
 end;
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientallergyreadlist(_hemitpatientallergyid text, _allergyname character varying, _hemitallergyid character varying, _note boolean, _hemitpatientid integer, _clientidin character varying, _clientidnotin character varying, _tpauserid integer, _userid bigint, _langid character varying, _page integer, _size integer, _orderby character varying)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$
DECLARE v_whereStatement TEXT; v_countStatement TEXT; v_queryStatement TEXT;_count INT;    
BEGIN

  IF _page=0 THEN
	  _page = 1;
	  _size = 100;
  END IF;


v_whereStatement = ''
|| CASE WHEN _hemitpatientallergyid IS NOT NULL THEN ' AND (HemitPatientAllergy.PatientAllergyId  = ANY(STRING_TO_ARRAY('||$1||', '','')::bigint[]) )'  ELSE ''  END
|| CASE WHEN _hemitallergyid IS NOT NULL THEN ' AND (hemitallergy.hemitallergyid  = ANY(STRING_TO_ARRAY('||$3||', '','')::bigint[]) )'  ELSE ''  END
|| CASE WHEN _note IS NOT NULL THEN ' AND (HemitPatientAllergy.note = '||$4||')'  ELSE ''  END
|| CASE WHEN _hemitpatientid IS NOT NULL THEN ' AND (HemitPatientAllergy.hemitpatientid = '||$5||')'  ELSE ''  END
|| ' AND ('
|| CASE WHEN _allergyname IS NOT NULL THEN ' OR (hemitallergy.name ILIKE ''%'' || '||$2||' || ''%'')' ELSE '' END 
--|| CASE WHEN _code IS NOT NULL THEN ' OR (allergy.code ILIKE ''%'' || $3 || ''%'')' ELSE '' END 
|| ')'
;
v_whereStatement = replace(v_whereStatement,' AND ( OR',' AND (');
v_whereStatement = replace(v_whereStatement,' AND ()','');


v_countStatement = CONCAT(' SELECT count(HemitPatientAllergy.hemitpatientallergyid) FROM HemitPatientAllergy WHERE 1 = 1 ',v_whereStatement);
execute v_countStatement  using 
_hemitpatientallergyid,_allergyname,_hemitallergyid,_note,_hemitpatientid,_clientidin,_clientidnotin,_tpauserid INTO _count;
  


v_queryStatement ='SELECT '||_count||' AS Count, HemitPatientAllergy.hemitpatientallergyid as id,hemitallergy.hemitallergyid , hemitallergy.name as name, HemitPatientAllergy.note as note,hemitallergy.code,HemitPatientAllergy.hemitpatientid as PatientId,HemitPatientAllergy.lastmodifieddate as lastmodifieddate
FROM HemitPatientAllergy LEFT JOIN hemitallergy ON HemitPatientAllergy.hemitallergyid = hemitallergy.hemitallergyid WHERE 1=1 ' || v_whereStatement || ' ORDER BY HemitPatientAllergy.hemitpatientallergyid'
|| CASE WHEN _page = -1 THEN '' ELSE ' LIMIT '||_size||' OFFSET '|| (_page-1)*_size END;    

 RAISE NOTICE 'sql: %', v_queryStatement; 
 v_queryStatement =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| v_queryStatement || ' ) A';  
 RETURN QUERY
 execute v_queryStatement using 
_hemitpatientallergyid,_allergyname,_hemitallergyid,_note,_hemitpatientid,_clientidin,_clientidnotin,_tpauserid;	

END
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientallergyupdate(_hemitpatientid integer DEFAULT NULL::integer, _hemitallergyid integer DEFAULT NULL::integer, _note character varying DEFAULT NULL::character varying, _allergyname character varying DEFAULT NULL::character varying, _hemitpatientallergyid integer DEFAULT NULL::integer, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying)
 RETURNS TABLE(id bigint)
 LANGUAGE plpgsql
AS $function$
declare 
createdkey integer;
_initialquery varchar :='update HemitPatientAllergy set hemitallergyid=(select hemitallergyid from HemitAllergy where name = '''||$4||'''),Note='''||$3||''' where hemitpatientid='||$1||' and hemitpatientallergyid='||$5||' returning hemitpatientallergyid';
-- _updatequery varchar:= ; 
-- _selectquery varchar:= '';
 begin
     --_initialquery := _updatequery || _selectquery ||'';

    raise notice '%',_initialquery;
    return query execute _initialquery using _hemitpatientid,_hemitallergyid,_note,_allergyname,_hemitpatientallergyid;
    
 end;
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientcreate(_firstname character varying, _lastname character varying, _middlename character varying, _hemitsexid bigint, _dob timestamp without time zone, _isactive boolean, _userid bigint, _langid character varying, _pk integer, _hemitpatientid bigint, _chartnumber character varying, _createddate timestamp without time zone, _createdbyid bigint, _lastmodifieddate timestamp without time zone, _lastmodifiedbyid bigint, _clientid smallint, _machineid character varying, _oldsystemid character varying, _isdeleted boolean, _issample boolean, _requestid uuid)
 RETURNS TABLE(id integer, modifieddate timestamp without time zone)
 LANGUAGE plpgsql
AS $function$
declare
	_id integer;
	_currentdate timestamp = current_timestamp;
begin
	
	select (now() at time zone 'utc') :: timestamp(3) into _currentdate;

insert into hemitpatient (
firstname,
lastname,
middlename,
hemitsexid,
dob, 
isActive,
createddate, 
createdbyid, 
lastmodifieddate, 
lastmodifiedbyid, 
clientid, 
machineid, 
oldsystemid, 
isdeleted, 
issample, 
requestid
)
values (
_firstname, 
_lastname, 
_middlename, 
_hemitsexid, 
_dob, 
_isActive, 
_currentdate, 
_userid, 
_currentdate, 
_userid, 
_clientid, 
_machineid, 
_oldsystemid, 
false, 
_issample, 
_requestid
)
RETURNING  hemitpatientid INTO _id
;

	return Query select _id, _currentdate;
end;
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientread(_pk character varying DEFAULT NULL::character varying, _hemitpatientid text DEFAULT NULL::text, _firstname character varying DEFAULT NULL::character varying, _lastname character varying DEFAULT NULL::character varying, _sexid character varying DEFAULT NULL::character varying, _dob timestamp without time zone DEFAULT NULL::timestamp without time zone, _orderby character varying DEFAULT NULL::character varying, _page integer DEFAULT 0, _size integer DEFAULT 0, _middlename character varying DEFAULT NULL::character varying, _chartnumber character varying DEFAULT NULL::character varying, _isactive boolean DEFAULT NULL::boolean, _isdeleted boolean DEFAULT false, _issample boolean DEFAULT NULL::boolean, _createddate timestamp without time zone DEFAULT NULL::timestamp without time zone, _createdbyid bigint DEFAULT NULL::bigint, _lastmodifieddate timestamp without time zone DEFAULT NULL::timestamp without time zone, _lastmodifiedbyid bigint DEFAULT NULL::bigint, _clientid smallint DEFAULT NULL::smallint, _machineid character varying DEFAULT NULL::character varying, _oldsystemid character varying DEFAULT NULL::character varying, _requestid uuid DEFAULT NULL::uuid, _clientidin character varying DEFAULT NULL::character varying, _clientidnotin character varying DEFAULT NULL::character varying, _tpauserid integer DEFAULT NULL::integer, _userid bigint DEFAULT NULL::bigint, _langid character varying DEFAULT NULL::character varying)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$ 
declare
get_query varchar;
--search_by varchar := '';
begin 
 
	get_query :=  'select p.hemitpatientid, p.firstname, p.lastname, p.middlename, p.sexid, p.chartnumber, p.dob, p.createddate, p.createdbyId, p.lastmodifieddate, p.lastmodifiedbyid, p.isactive, p.isdeleted,
	p.clientid, p.machineid, p.oldsystemid, p.requestid, p.issample
    from hemitpatient p  where p.isdeleted = false' ||
	case when _hemitpatientid is not null then (case when _hemitpatientid != '0' then ' and (p.hemitpatientid  = ANY(STRING_TO_ARRAY($1, '','')::bigint[]) )' else ' and 1 != 1' end) else '' end ||
	case when _firstName is not null then ' and (p.firstname ILIKE ANY(ARRAY[$2]))' else '' end ||
	case when _lastName is not null then ' and (p.lastname ILIKE ANY(ARRAY[$3]))' else '' end ||
	case when _sexId is not null then ' and ( p.sexid = ANY(STRING_TO_ARRAY($4, '','')::bigint[]) )' else '' end ||
	case when _dob is not null then ' and p.dob = $5' else '' end ||
	case when _middleName is not null then ' and (p.middlename ILIKE ANY(ARRAY[$9]))' else '' end ||
	case when _chartNumber is not null then ' and (p.chartnumber ILIKE ANY(ARRAY[$10]))' else '' end ||
	case when _isActive is not null then ' and p.isActive = $11' else '' end ||
	case when _createddate is not null then ' and (p.createddate = $12)'  else '' end ||
	case when _lastmodifieddate is not null then ' and (p.lastmodifieddate = $13)'  else '' end ||
	case when _orderby is not null then ' order by ' || $6 else '' end ||
	case when _page > 0 then ' limit ' || _size || ' offset ' || (_page-1)*_size else '' end 
	;

	get_query =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM (' || get_query || ' ) A';  
	
	raise notice '%',get_query;
	
	return query execute get_query using _hemitpatientid, _firstName, _lastName, _sexId, _dob, _orderBy, _page, _size, _middleName, _chartNumber, _isActive, _createddate, _lastmodifieddate;
end;
$function$
;


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientsdelete(_pagenumber integer DEFAULT 1, _pagesize integer DEFAULT 20, _hemitpatientsid integer DEFAULT NULL::integer, _firstname character varying DEFAULT ''::character varying, _middlename character varying DEFAULT ''::character varying, _lastname character varying DEFAULT ''::character varying, _gender character varying DEFAULT ''::character varying, _sexid character varying DEFAULT NULL::character varying, _dob character varying DEFAULT NULL::character varying, _allergyname character varying DEFAULT ''::character varying, _orderby character varying DEFAULT 'HemitPatient.hemitpatientid'::character varying, _ordertype character varying DEFAULT 'ASC'::character varying, _userid integer DEFAULT NULL::integer, _langid character varying DEFAULT NULL::character varying, _lastmodifieddate timestamp without time zone DEFAULT NULL::timestamp without time zone, _clientid integer DEFAULT NULL::integer, _machineid character varying DEFAULT NULL::character varying, _oldsystemid character varying DEFAULT NULL::character varying, _requestid character varying DEFAULT NULL::character varying, _issample character varying DEFAULT NULL::character varying)
 RETURNS TABLE(id integer)
 LANGUAGE plpgsql
AS $function$
declare 
--_query varchar :='';
 _query varchar:= 'update HemitPatient set isdeleted=true'; 
 errormsg VARCHAR(500);_currentdate timestamp;
 begin
     /*_query := _query || ' where hemitpatientid='||$3||' returning hemitpatientid';
     raise notice '%',_query;
     return query execute _query using _hemitpatientsid;--,_FirstName,_MiddleName,_LastName,_DOB;
    */
    select (now() at time zone 'utc') :: timestamp(3) into _currentdate;

	IF EXISTS(SELECT 1 FROM HemitPatient WHERE HemitPatient.hemitpatientid = _hemitpatientsid AND HemitPatient.isdeleted = false) THEN

		  UPDATE HemitPatient SET 
		  isdeleted = true,
		  lastmodifiedbyid = _userId,
		  lastmodifieddate = _currentdate
		  WHERE HemitPatient.hemitpatientid = _hemitpatientsid;
		  RETURN QUERY 
		  select _hemitpatientsid;

  ELSE
  SELECT fnErrorMessageRead('Concurrency') INTO errormsg;
  RAISE EXCEPTION '%',errormsg; 
  END IF;
    
 end;
$function$
;


DROP FUNCTION IF EXISTS uspnewhemitpatientsupdate;

CREATE OR REPLACE FUNCTION public.uspnewhemitpatientsupdate(_pagenumber integer DEFAULT 1, _pagesize integer DEFAULT 20, _hemitpatientid integer DEFAULT NULL::integer, _firstname character varying DEFAULT ''::character varying, _middlename character varying DEFAULT ''::character varying, _lastname character varying DEFAULT ''::character varying, _gender character varying DEFAULT ''::character varying, _sexid integer DEFAULT NULL::integer, _dob character varying DEFAULT NULL::character varying, _allergyname character varying DEFAULT ''::character varying, _orderby character varying DEFAULT 'HemitPatient.hemitpatientid'::character varying, _ordertype character varying DEFAULT 'ASC'::character varying, _userid character varying DEFAULT NULL::character varying, _langid character varying DEFAULT NULL::character varying, _searchby character varying DEFAULT NULL::character varying, _chartnumber character varying DEFAULT NULL::character varying, _isactive boolean DEFAULT true)
 RETURNS TABLE(id bigint)
 LANGUAGE plpgsql
AS $$
declare 
_initialquery varchar :='update HemitPatient set firstname = '''||$4||''',middlename='''||$5||''',lastname='''||$6||''',sexid='||$8||',dob='''||$9||''',createdbyid='||_userId::bigint||',lastmodifiedbyid='||_userId::bigint ||'where hemitpatientid='||$3||' and isdeleted=false returning hemitpatientid';
-- _updatequery varchar:= ; 
-- _selectquery varchar:= '';
errormsg VARCHAR(500);_currentdate timestamp;
 begin
     --_initialquery := _updatequery || _selectquery ||'';
     raise notice '%',_initialquery;
     return query execute _initialquery using _hemitpatientid,_FirstName,_MiddleName,_LastName,_SexId,_DOB;
 end;
$$

;


DROP FUNCTION IF EXISTS uspnewhemitpatientscreate;
CREATE OR REPLACE FUNCTION public.uspnewhemitpatientscreate
(_hemitpatientid integer DEFAULT NULL::integer,  
_chartnumber character varying DEFAULT NULL::character varying,
_isactive boolean default true, 
_firstname character varying DEFAULT ''::character varying, 
_middlename character varying DEFAULT ''::character varying, 
_lastname character varying DEFAULT ''::character varying, 
_gender character varying DEFAULT ''::character varying, 
_sexid integer DEFAULT NULL::integer, 
_dob character varying DEFAULT NULL::character varying, 
_allergyname character varying DEFAULT ''::character varying, 
_orderby character varying DEFAULT NULL::character varying, 
_ordertype character varying DEFAULT 'ASC'::character varying, 
_userid character varying DEFAULT NULL::character varying, 
_langid character varying DEFAULT NULL::character varying, 
_searchby character varying DEFAULT NULL::character varying,
_pagenumber integer DEFAULT 1, 
_pagesize integer DEFAULT 20)
 RETURNS TABLE(id integer, modifieddate timestamp without time zone)
 LANGUAGE plpgsql
AS $function$
declare
_id integer;_currentdate timestamp without time zone= current_timestamp;
begin
	
select (now() at time zone 'utc') :: timestamp(3) into _currentdate;
  
INSERT INTO HemitPatient(
isactive,
firstname,
lastname,
chartnumber,
middlename,
sexid,
dob,
createdbyid,
lastmodifiedbyid,
createddate,
lastmodifieddate
) VALUES(_isactive,
_firstname,
_lastname,
_chartnumber,
_middlename,
_SexId,
_dob::date,
_userId::int,
_userId::int,
_currentdate,
_currentdate) 
returning hemitpatientid INTO _id;
   
RETURN QUERY
select _id, _currentdate;
 
End;
$function$
;

