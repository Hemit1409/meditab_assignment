CREATE TABLE public.hemitpatient (
	pk int4 NOT NULL GENERATED ALWAYS AS IDENTITY,
	hemitpatientid int8 NOT NULL GENERATED ALWAYS AS (fngetprimarykey(pk, clientid)) STORED,
	firstname varchar(50) NOT NULL,
	lastname varchar(50) NOT NULL,
	middlename varchar(50) NULL,
	sexid int4 NULL,
	chartnumber varchar(20) NULL GENERATED ALWAYS AS ((('CHART'::text || pk::text))) STORED,
	dob timestamp NULL,
	createddate timestamp NOT NULL,
	createdbyid int8 NOT NULL,
	lastmodifieddate timestamp NOT NULL,
	lastmodifiedbyid int8 NOT NULL,
	clientid int2 NOT NULL,
	machineid varchar(40) NOT NULL,
	oldsystemid varchar(40) NULL,
	isdeleted bool NOT NULL DEFAULT false,
	isactive bool NOT NULL DEFAULT true,
	issample bool NOT NULL DEFAULT false,
	requestid uuid NOT NULL DEFAULT uuid_generate_v1(),
	CONSTRAINT pk_hemitpatient PRIMARY KEY (hemitpatientid)
);


update hemitpatient set sexid = 100071136 where sexid=3;

CREATE TABLE public.hemitallergy (
	pk int4 NOT NULL GENERATED ALWAYS AS IDENTITY,
	hemitallergyid int8 NOT NULL GENERATED ALWAYS AS (fngetprimarykey(pk, clientid)) STORED,
	code varchar(20) NOT NULL,
	"name" varchar(200) NOT NULL,
	createddate timestamp NOT NULL,
	createdbyid int8 NOT NULL,
	lastmodifieddate timestamp NOT NULL,
	lastmodifiedbyid int8 NOT NULL,
	clientid int2 NOT NULL,
	machineid varchar(40) NOT NULL,
	oldsystemid varchar(40) NULL,
	isdeleted bool NOT NULL DEFAULT false,
	isactive bool NOT NULL DEFAULT true,
	issample bool NOT NULL DEFAULT false,
	requestid uuid NOT NULL DEFAULT uuid_generate_v1(),
	CONSTRAINT pk_hemitallergy PRIMARY KEY (hemitallergyid)
);

update hemitallergy set createdbyid = 1000768 where createdbyid=1;
update hemitallergy set lastmodifiedbyid = 1000768 where lastmodifiedbyid=1;

CREATE TABLE public.hemitpatientallergy (
	pk int4 NOT NULL GENERATED ALWAYS AS IDENTITY,
	hemitpatientallergyid int8 NOT NULL GENERATED ALWAYS AS (fngetprimarykey(pk, clientid)) STORED,
	hemitpatientid int4 NOT NULL,
	hemitallergyid int4 NOT NULL,
	note text NULL,
	createddate timestamp NOT NULL,
	createdbyid int8 NOT NULL,
	lastmodifieddate timestamp NOT NULL,
	lastmodifiedbyid int8 NOT NULL,
	clientid int2 NOT NULL,
	machineid varchar(40) NOT NULL,
	oldsystemid varchar(40) NULL,
	isdeleted bool NOT NULL DEFAULT false,
	issample bool NOT NULL DEFAULT false,
	requestid uuid NOT NULL DEFAULT uuid_generate_v1(),
	CONSTRAINT pk_hemitpatientallergy PRIMARY KEY (hemitpatientallergyid),
	CONSTRAINT fk_hemitallergy FOREIGN KEY (hemitallergyid) REFERENCES public.hemitallergy(hemitallergyid),
	CONSTRAINT fk_hemitpatient FOREIGN KEY (hemitpatientid) REFERENCES public.hemitpatient(hemitpatientid)
);


update hemitpatientallergy set createdbyid = 1000768 where createdbyid=1;
update hemitpatientallergy set lastmodifiedbyid = 1000768 where lastmodifiedbyid=1;

CREATE TABLE public.hemitsex (
	pk int4 NOT NULL GENERATED ALWAYS AS IDENTITY,
	hemitsexid int8 NOT NULL GENERATED ALWAYS AS (fngetprimarykey(pk, clientid)) STORED,
	sex varchar(100) NOT NULL,
	createddate timestamp NOT NULL,
	createdbyid int8 NOT NULL,
	lastmodifieddate timestamp NOT NULL,
	lastmodifiedbyid int8 NOT NULL,
	clientid int2 NOT NULL,
	machineid varchar(40) NOT NULL,
	oldsystemid varchar(40) NULL,
	isdeleted bool NOT NULL DEFAULT false,
	issample bool NOT NULL DEFAULT false,
	requestid uuid NOT NULL DEFAULT uuid_generate_v1(),
	CONSTRAINT pk_hemitsex PRIMARY KEY (hemitsexid)
);


CREATE OR REPLACE FUNCTION public.uspnewhemitpatientcreate(_firstname character varying, _lastname character varying, _middlename character varying, _hemitsexid bigint, _dob timestamp without time zone, _isactive boolean, _userid bigint, _langid character varying, _pk integer, _hemitpatientid bigint, _chartnumber character varying, _createddate timestamp without time zone, _createdbyid bigint, _lastmodifieddate timestamp without time zone, _lastmodifiedbyid bigint, _clientid smallint, _machineid character varying, _oldsystemid character varying, _isdeleted boolean, _issample boolean, _requestid uuid)
 RETURNS TABLE(id integer, modifieddate timestamp without time zone)
 LANGUAGE plpgsql
AS $function$
declare
	_id integer;
	_currentdate timestamp = current_timestamp;
begin
	
	select (now() at time zone 'utc') :: timestamp(3) into _currentdate;

insert into hemitpatient (
firstname,
lastname,
middlename,
hemitsexid,
dob, 
isActive,
createddate, 
createdbyid, 
lastmodifieddate, 
lastmodifiedbyid, 
clientid, 
machineid, 
oldsystemid, 
isdeleted, 
issample, 
requestid
)
values (
_firstname, 
_lastname, 
_middlename, 
_hemitsexid, 
_dob, 
_isActive, 
_currentdate, 
_userid, 
_currentdate, 
_userid, 
_clientid, 
_machineid, 
_oldsystemid, 
false, 
_issample, 
_requestid
)
RETURNING  hemitpatientid INTO _id
;

	return Query select _id, _currentdate;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.uspnewhemitpatientread(_pk character varying DEFAULT NULL::character varying, _hemitpatientid text DEFAULT NULL::text, _firstname character varying DEFAULT NULL::character varying, _lastname character varying DEFAULT NULL::character varying, _sexid character varying DEFAULT NULL::character varying, _dob timestamp without time zone DEFAULT NULL::timestamp without time zone, _orderby character varying DEFAULT NULL::character varying, _page integer DEFAULT 0, _size integer DEFAULT 0, _middlename character varying DEFAULT NULL::character varying, _chartnumber character varying DEFAULT NULL::character varying, _isactive boolean DEFAULT NULL::boolean, _isdeleted boolean DEFAULT false, _issample boolean DEFAULT NULL::boolean, _createddate timestamp without time zone DEFAULT NULL::timestamp without time zone, _createdbyid bigint DEFAULT NULL::bigint, _lastmodifieddate timestamp without time zone DEFAULT NULL::timestamp without time zone, _lastmodifiedbyid bigint DEFAULT NULL::bigint, _clientid smallint DEFAULT NULL::smallint, _machineid character varying DEFAULT NULL::character varying, _oldsystemid character varying DEFAULT NULL::character varying, _requestid uuid DEFAULT NULL::uuid, _clientidin character varying DEFAULT NULL::character varying, _clientidnotin character varying DEFAULT NULL::character varying, _tpauserid integer DEFAULT NULL::integer, _userid bigint DEFAULT NULL::bigint, _langid character varying DEFAULT NULL::character varying)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$ 
declare
get_query varchar;
--search_by varchar := '';
begin 
 
	get_query :=  'select p.hemitpatientid, p.firstname, p.lastname, p.middlename, p.sexid, p.chartnumber, p.dob, p.createddate, p.createdbyId, p.lastmodifieddate, p.lastmodifiedbyid, p.isactive, p.isdeleted,
	p.clientid, p.machineid, p.oldsystemid, p.requestid, p.issample
    from hemitpatient p  where p.isdeleted = false' ||
	case when _hemitpatientid is not null then (case when _hemitpatientid != '0' then ' and (p.hemitpatientid  = ANY(STRING_TO_ARRAY($1, '','')::bigint[]) )' else ' and 1 != 1' end) else '' end ||
	case when _firstName is not null then ' and (p.firstname ILIKE ANY(ARRAY[$2]))' else '' end ||
	case when _lastName is not null then ' and (p.lastname ILIKE ANY(ARRAY[$3]))' else '' end ||
	case when _sexId is not null then ' and ( p.sexid = ANY(STRING_TO_ARRAY($4, '','')::bigint[]) )' else '' end ||
	case when _dob is not null then ' and p.dob = $5' else '' end ||
	case when _middleName is not null then ' and (p.middlename ILIKE ANY(ARRAY[$9]))' else '' end ||
	case when _chartNumber is not null then ' and (p.chartnumber ILIKE ANY(ARRAY[$10]))' else '' end ||
	case when _isActive is not null then ' and p.isActive = $11' else '' end ||
	case when _createddate is not null then ' and (p.createddate = $12)'  else '' end ||
	case when _lastmodifieddate is not null then ' and (p.lastmodifieddate = $13)'  else '' end ||
	case when _orderby is not null then ' order by ' || $6 else '' end ||
	case when _page > 0 then ' limit ' || _size || ' offset ' || (_page-1)*_size else '' end 
	;

	get_query =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM (' || get_query || ' ) A';  
	
	raise notice '%',get_query;
	
	return query execute get_query using _hemitpatientid, _firstName, _lastName, _sexId, _dob, _orderBy, _page, _size, _middleName, _chartNumber, _isActive, _createddate, _lastmodifieddate;
end;
$function$
;

--select * from uspnewhemitpatientread(_hemitpatientid text DEFAULT NULL::text);
select * from uspnewhemitpatientread(_hemitpatientid=>'12');

select * from hemitpatient;


create or replace function uspNewHemitPatientsRead(
                _page INTEGER = 1,
  			_size INTEGER = 20,
			_hemitpatientid text default null,
			_FirstName varchar default '',
			_MiddleName varchar(100) default '', 
			_LastName varchar default '',
			_Gender varchar default '',
			_SexId varchar default null,
			_DOB varchar default null,
			_allergyname varchar default '',
			_orderby in varchar default 'HemitPatient.hemitpatientid',
			_ordertype in varchar default 'ASC',
			_userId varchar default null,
			_langId varchar default null,
                _clientidin varchar default null,
                _clientidnotin varchar default null,
                _tpauserid varchar default null,
                _searchby varchar default null,
                _chartnumber varchar default null
                )
RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$
declare 
--_query varchar :='';
 _query varchar:= 'select HemitPatient.hemitpatientid as hemitpatientid,chartnumber,firstname , lastname,middlename, gender.code as gendercode,gender.description as genderdescription,dob,HemitPatient.sexid as sexid,HemitPatient.createdbyid as CreatedById,HemitPatient.lastmodifiedbyid as LastModifiedById from HemitPatient 
left join staticmiscvaluemap as gender on gender.staticmiscvaluemapid = HemitPatient.sexid
/*LEFT JOIN HemitPatientAllergy ON HemitPatient.hemitpatientid = HemitPatientAllergy.hemitpatientid 
LEFT JOIN hemitallergy ON HemitPatientAllergy.hemitallergyid = hemitallergy.hemitallergyid*/'; 
v_queryStatement TEXT;
 begin
     _query := _query || ' where HemitPatient.isdeleted=false and (HemitPatient.hemitpatientid  = ANY(STRING_TO_ARRAY('''||$3||''', '','')::bigint[]) )';--||;--' LIMIT 1';
    v_queryStatement =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| _query ||' ) A';
     raise notice '%',v_queryStatement;
     return query execute v_queryStatement using _hemitpatientid,_FirstName,_LastName,_MiddleName,_SexId,_DOB;
 end
$function$
;

select * from uspnewhemitpatientsread(_patientid=>'12');


SELECT * FROM uspNewhemitpatientsRead (_hemitpatientid => '12,13',_firstname => NULL,_middlename => NULL,_lastname => NULL,_sexid => '0', _dob => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 0, _size => 0 , _orderby =>  null,_chartnumber=>null)

SELECT * FROM uspNewhemitpatientsRead (_hemitpatientid => '12',_firstname => NULL,_middlename => NULL,_lastname => NULL,_sexid => '0', _dob => NULL,_isactive => 'False', _searchby => NULL,_chartnumber => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 0, _size => 0 , _orderby =>  'HemitPatient.hemitpatientid');

SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM (select HemitPatient.hemitpatientid as hemitpatientid,chartnumber,firstname , lastname,middlename, gender.code as gendercode,gender.description as genderdescription,dob,HemitPatient.sexid as sexid,HemitPatient.createdbyid as CreatedById,HemitPatient.lastmodifiedbyid as LastModifiedById from HemitPatient 
left join staticmiscvaluemap as gender on gender.staticmiscvaluemapid = HemitPatient.sexid
LEFT JOIN HemitPatientAllergy ON HemitPatient.hemitpatientid = HemitPatientAllergy.hemitpatientid 
LEFT JOIN hemitallergy ON HemitPatientAllergy.hemitallergyid = hemitallergy.hemitallergyid where HemitPatient.isdeleted=false and (HemitPatient.hemitpatientid  = ANY(STRING_TO_ARRAY('12', ',')::bigint[]) ) ) A

SELECT * FROM uspNewhemitpatientsRead (_hemitpatientid => '12',_firstname => NULL,_middlename => NULL,_lastname => NULL,_sexid => '0', _dob => NULL, _searchby => NULL,_chartnumber => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 0, _size => 0 , _orderby =>  'HemitPatient.hemitpatientid');

create  or replace function  
uspNewHemitPatientsReadList(
			_Page INTEGER = 1,
  			_size INTEGER = 20,
			_hemitpatientid int default null,
			_FirstName varchar default '',
			_MiddleName varchar(100) default '', 
			_LastName varchar default '',
			_Gender varchar default '',
			_SexId varchar default null,
			_DOB varchar default null,
			_allergyname varchar default '',
			_orderby in varchar default 'HemitPatient.hemitpatientid',
			_ordertype in varchar default 'ASC',
			_searchby in varchar default null,
			_userId varchar default null,
			_langId varchar default null,
                _clientidin varchar default null,
                _clientidnotin varchar default null,
                _tpauserid varchar default null,
                _chartnumber varchar default null
			)
RETURNS SETOF json
language plpgsql
as
$$
declare 
_count INT; 
initialquery varchar(2000) := '';
initialquery2 varchar(2000) := '';
v_countStatement varchar(3000) := '';

begin

initialquery2 = ''
	|| case when $3 != 0 then ' and HemitPatient.hemitpatientid = '''||$3||'''' else '' end 
	|| case when $4 != '' then ' and HemitPatient.firstname = '''||$4||'''' else '' end 
	||case when $6 != '' then ' and HemitPatient.lastname = '''||$6||'''' else '' end 
	--||case when $8 != '' then ' and HemitSex.sex = '''||$8||'''' else ''  end
	|| case when $9 != '' then ' and HemitPatient.dob = '''||$9::date||'''' else ''  end
	--||case when $10 != '' then ' and hemitallergy.name = '''||$10||'''' else '' end
	||case when $13 != '' then ' and (HemitPatient.firstname = '''||$13||''' or HemitPatient.lastname = '''||$13||'''or HemitPatient.chartnumber = '''||$13||''')' else '' end;

v_countStatement = CONCAT(' SELECT count(HemitPatient.hemitpatientid) FROM HemitPatient WHERE 1 = 1 ',initialquery2);
execute v_countStatement  using 
_Page,_Size,_hemitpatientid,_FirstName,_LastName,_gender,_DOB,_allergyname,_orderby,_ordertype INTO _count;

initialquery = 'Select '||_count||' AS Count, HemitPatient.hemitpatientid as Id, HemitPatient.firstname, HemitPatient.lastname, HemitPatient.dob, HemitPatient.chartnumber as chartnumber,gender.code as gendercode,gender.description as genderdescription,
DENSE_RANK() OVER (
		ORDER BY HemitPatient.hemitpatientid
	) as denserow 
From
    HemitPatient
    left join staticmiscvaluemap as gender on gender.staticmiscvaluemapid = HemitPatient.sexid 

where HemitPatient.isdeleted=false and 1=1 ';

	initialquery := 'select * from(' || initialquery
	|| case when $3 != 0 then ' and HemitPatient.hemitpatientid = '''||$3||'''' else '' end 
	|| case when $4 != '' then ' and HemitPatient.firstname = '''||$4||'''' else '' end 
	||case when $6 != '' then ' and HemitPatient.lastname = '''||$6||'''' else '' end 
	--||case when $8 != '' then ' and HemitSex.sex = '''||$8||'''' else ''  end
	|| case when $9 != '' then ' and HemitPatient.dob = '''||$9::date||'''' else ''  end
	--||case when $10 != '' then ' and hemitallergy.name = '''||$10||'''' else '' end
	||case when $13 != '' then ' and (HemitPatient.firstname = '''||$13||''' or HemitPatient.lastname = '''||$13||'''or HemitPatient.chartnumber = '''||$13||''')' else '' end
	||' ORDER BY '|| $11|| ' ' || $12
	/*||
	' OFFSET (('||$1||'-1) *'|| $2||')'*/
	||')as table1 where denserow<='||$2||'*'||$1 ||'and denserow>'||$2||'*'||($1-1) ;--||'group by denserow';

initialquery =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| initialquery || ' ) A'; 
raise notice 'sql %' , initialquery;
	return query execute initialquery using _Page,_Size,_hemitpatientid,_FirstName,_LastName,_gender,_DOB,_allergyname,_orderby,_ordertype;
end;
$$

SELECT * FROM uspNewhemitpatientsReadList (_patientid => '0',_firstname => NULL,_lastname => NULL,_dob => NULL,_searchby => 'CHART3', _clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 1, _size => 20 , _orderby =>  'HemitPatient.hemitpatientid');


SELECT * FROM uspNewHemitPatientsReadList(_hemitpatientid => '12',_firstname => '', _middlename => NULL,_lastname => NULL,_orderby => 'HemitPatient.hemitpatientid', _sexid => NULL,_ordertype => 'ASC', _dob => NULL,_allergyname => NULL);


/*
SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM (select * from(Select HemitPatient.hemitpatientid as Id, HemitPatient.firstname, HemitPatient.lastname, HemitPatient.dob, HemitPatient.chartnumber as chartnumber,HemitSex.sex,HemitPatient.hemitsexid as hemitsexid,
DENSE_RANK() OVER (
		ORDER BY HemitPatient.hemitpatientid
	) as denserow 
From
    HemitPatient
    LEFT JOIN HemitSex ON HemitPatient.hemitsexid = HemitSex.hemitsexid 

where HemitPatient.isdeleted=false and 1=1  and HemitPatient.hemitpatientid = '12' ORDER BY HemitPatients.patient_id ASC)as table1 where denserow<=20*1and denserow>20*0 ) A;
*/


SELECT * FROM uspNewHemitPatientsReadList (_patientid => '0',_firstname => NULL,_lastname => NULL,_dob => NULL,_searchby => 'Rana', _clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 1, _size => 20 , _orderby =>  'HemitPatient.hemitpatientid');


SELECT * FROM uspNewhemitpatientsReadList (_patientid => '0',_firstname => NULL,_lastname => NULL,_dob => NULL,_searchby => 'Rana', _clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 1, _size => 20 , _orderby =>  'HemitPatient.hemitpatientid')


SELECT * FROM uspNewhemitpatientsReadList (_hemitpatientid => '0',_firstname => 'Priyas', _lastname => 'WARGHESE', _dob => NULL,_searchby => NULL,_chartnumber => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 1, _size => 2 , _orderby =>  'HemitPatient.hemitpatientid');

SELECT * FROM uspNewhemitpatientsReadList (_hemitpatientid => '0',_firstname => 'Priyas', _lastname => 'WARGHESE', _dob => NULL,_searchby => NULL,_chartnumber => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 1, _size => 2 , _orderby =>  'HemitPatient.hemitpatientid')

create  or replace function  
Hemituspgetpatientfilter(
			_Page INTEGER = 1,
  			_size INTEGER = 20,
			_hemitpatientid int default null,
			_FirstName varchar default '',
			_MiddleName varchar(100) default '', 
			_LastName varchar default '',
			_sex varchar default '',
			_SexId varchar default null,
			_DOB varchar default null,
			_allergyname varchar default '',
			_orderby in varchar default 'HemitPatient.hemitpatientid',
			_ordertype in varchar default 'ASC',
			_searchby in varchar default null,
			_userId varchar default null,
			_langId varchar default null,
                _clientidin varchar default null,
                _clientidnotin varchar default null,
                _tpauserid varchar default null,
                _chartnumber varchar default null
			)
RETURNS SETOF json
language plpgsql
as
$$
declare 
_count INT; 
initialquery varchar(2000) := 'Select HemitPatient.hemitpatientid as hemitpatientid, HemitPatient.firstname, HemitPatient.lastname, HemitPatient.middlename, HemitPatient.dob, HemitPatient.chartnumber as chartnumber,HemitPatient.sexid as hemitsexid,gender.code as sex,gender.description as description,
DENSE_RANK() OVER (
		ORDER BY HemitPatient.hemitpatientid
	) as denserow 
From
    HemitPatient
    left join staticmiscvaluemap as gender on gender.staticmiscvaluemapid = HemitPatient.sexid

where HemitPatient.isdeleted=false and 1=1 ';
initialquery2 varchar(2000) := '';
v_countStatement varchar(3000) := '';
 
begin

	
	initialquery := 'select * from(' || initialquery
	|| case when $3 != 0 then ' and HemitPatient.hemitpatientid = '''||$3||'''' else '' end 
	|| case when $4 != '' then ' and HemitPatient.firstname = '''||$4||'''' else '' end 
	||case when $6 != '' then ' and HemitPatient.lastname = '''||$6||'''' else '' end 
	--||case when $8 != '0' then ' and HemitSex.sex = '''||$8||'''' else ''  end
	|| case when $9 != '' then ' and HemitPatient.dob = '''||$9::date||'''' else ''  end
	--||case when $10 != '' then ' and hemitallergy.AllergyName = '''||$10||'''' else '' end
	||case when $13 != '' then ' and (HemitPatient.firstname = '''||$13||''' or HemitPatient.lastname = '''||$13||''')' else '' end
	||' ORDER BY '|| $11|| ' ' || $12
	/*||
	' OFFSET (('||$1||'-1) *'|| $2||')'*/
	||')as table1 where denserow<='||$2||'*'||$1 ||'and denserow>'||$2||'*'||($1-1) ;--||'group by denserow';


initialquery =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| initialquery || ' ) A'; 
raise notice 'sql %' , initialquery;
	return query execute initialquery using _Page,_Size,_hemitpatientid,_FirstName,_LastName,_sex,_DOB,_allergyname,_orderby,_ordertype;
end;
$$

SELECT * FROM Hemituspgetpatientfilter (_patientid => '0',_firstname => 'Hemit', _middlename => NULL,_lastname => NULL,_sexid => NULL, _dob => NULL,_ordertype => 'ASC', _allergyname => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000769',_langId => '')

SELECT * FROM Hemituspgetpatientfilter (_patientid => '0',_firstname => NULL,_middlename => NULL,_lastname => NULL,_sexid => '0', _dob => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '')

SELECT * FROM Hemituspgetpatientfilter (_hemitpatientid => '0',_firstname => 'Hemit', _middlename => NULL,_lastname => NULL,_sexid => '0', _dob => NULL,_ordertype => 'ASC', _allergyname => NULL,_sex => 'FEMALE', _clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '')
;

SELECT * FROM Hemituspgetpatientfilter (_size => '20',_page => '1',_hemitpatientid => '0',_firstname => NULL,_middlename => NULL,_lastname => 'WARGHESE', _sexid => '0', _dob => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000769',_langId => '');

create or replace function uspNewHemitPatientsdelete(
                _PageNumber INTEGER = 1,
  			_PageSize INTEGER = 20,
			_hemitpatientsid  int default null,
			_FirstName varchar default '',
			_MiddleName varchar(100) default '', 
			_LastName varchar default '',
			_Gender varchar default '',
			_SexId varchar default null,
			_DOB varchar default null,
			_allergyname varchar default '',
			_orderby in varchar default 'HemitPatient.hemitpatientid',
			_ordertype in varchar default 'ASC',
			_userId int default null,
			_langId varchar default null,
			_lastmodifieddate timestamp without time zone default null,
			_clientid int default null,
			_machineid varchar default null,
			_oldsystemid varchar default null,
			_requestid varchar default null,
			_issample varchar default null
                )
returns table (
                id int
                /*firstname varchar,
                lastname varchar,
                middlename varchar,
                dob date*/
)
language plpgsql
as
$$
declare 
--_query varchar :='';
 _query varchar:= 'update HemitPatient set isdeleted=true'; 
 errormsg VARCHAR(500);_currentdate timestamp;
 begin
     /*_query := _query || ' where hemitpatientid='||$3||' returning hemitpatientid';
     raise notice '%',_query;
     return query execute _query using _hemitpatientsid;--,_FirstName,_MiddleName,_LastName,_DOB;
    */
    select (now() at time zone 'utc') :: timestamp(3) into _currentdate;

	IF EXISTS(SELECT 1 FROM HemitPatient WHERE HemitPatient.hemitpatientid = _hemitpatientsid AND HemitPatient.isdeleted = false) THEN

		  UPDATE HemitPatient SET 
		  isdeleted = true,
		  lastmodifiedbyid = _userId,
		  lastmodifieddate = _currentdate
		  WHERE HemitPatient.hemitpatientid = _hemitpatientsid;
		  RETURN QUERY 
		  select _hemitpatientsid;

  ELSE
  SELECT fnErrorMessageRead('Concurrency') INTO errormsg;
  RAISE EXCEPTION '%',errormsg; 
  END IF;
    
 end;
$$  

select * from uspNewHemitPatientsdelete(_hemitpatientsid=>3);
SELECT * FROM uspNewHemitPatientsDelete (_hemitpatientsid => '1',_lastmodifieddate => '0001-01-01 00:00:00.000',_clientid => '10007',_machineid => '::1',_oldsystemid => NULL,_issample => 'false',_requestid => '13a81649-e3b8-41c5-9f57-f1aefd1f0e45',_userId => '1000769',_langId => '');


SELECT * FROM uspNewhemitpatientsDelete (_hemitpatientsid => '12',_lastmodifieddate => '0001-01-01 00:00:00.000',_clientid => '10007',_machineid => '::1',_oldsystemid => NULL,_issample => 'false',_requestid => '31bfb294-4216-4024-bd9d-4df099b8be66',_userId => '1000768',_langId => '');


select (now() at time zone 'utc') :: timestamp(3);

update HemitPatient set isdeleted=true where hemitpatientid=12 returning hemitpatientid,firstname , lastname,middlename,hemitsexid,dob;


update HemitPatient set isdeleted=true where hemitpatientid=12 returning hemitpatientid,firstname , lastname,middlename,dob;


SELECT * FROM uspNewhemitpatientsDelete (_hemitpatientsid => '12',_lastmodifieddate => '0001-01-01 00:00:00.000',_clientid => '10007',_machineid => '::1',_oldsystemid => NULL,_issample => 'false',_requestid => '7a46d740-a3d7-476b-a3a8-ffed8a0b6f93',_userId => '1000768',_langId => '');

update HemitPatient set isdeleted=true where hemitpatientid=12 returning hemitpatientid,firstname , lastname,middlename,dob



SELECT * FROM uspNewHemitPatientsdelete (_hemitpatientsid => '19',_lastmodifieddate => '0001-01-01 00:00:00.000',_clientid => '10007',_machineid => '::1',_oldsystemid => NULL,_issample => 'false',_requestid => 'c2962e46-245c-4a99-a72c-b665ac3a759c',_userId => '1000768',_langId => '');
/*uspnewhemitpatientallergyread(_allergyname => unknown, _note => unknown, _patientallergyid => unknown, _allergymasterid => unknown, _patientid => unknown, 
_clientidin varchar default null, 
_clientidnotin varchar default null, 
_tpauserid varchar default null, 
_userid varchar default null, 
_langid varchar default null, 

_orderby varchar default null);*/

create or replace function uspNewHemitPatientAllergyRead(
_hemitpatientid INT, 
_hemitallergyid INT default null, 
_note varchar(100) default null,
_allergyname varchar(100) default null,
_hemitpatientallergyid int default null,
_page integer default 0, 
_size integer default 0,
_clientidin varchar default null, 
_clientidnotin varchar default null, 
_tpauserid varchar default null, 
_userid varchar default null, 
_langid varchar default null, 
_orderby varchar default null
                
                )
returns SETOF json
language plpgsql
as
$$
declare 
--_query varchar :='';
 _query varchar:= 'select HemitPatient.hemitpatientid,hemitallergy.name,HemitPatientAllergy.note,hemitallergy.code,HemitPatientAllergy.hemitpatientallergyid,HemitPatientAllergy.hemitallergyid from HemitPatient 
LEFT JOIN HemitPatientAllergy ON HemitPatient.hemitpatientid = HemitPatientAllergy.hemitpatientid 
LEFT JOIN hemitallergy ON HemitPatientAllergy.hemitallergyid = hemitallergy.hemitallergyid'; 
 v_queryStatement TEXT;
 begin
     _query := _query || ' where HemitPatient.isdeleted=false and HemitPatient.hemitpatientid='||$1;--||;--' LIMIT 1';
     raise notice '%',_query;
     v_queryStatement =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| _query || ' ) A';  
     return query execute v_queryStatement using _hemitpatientid;
 end;
$$ 


select * from Hemit_uspNewPatientsRead(4);

select * from uspNewHemitPatientAllergyRead(_hemitpatientid=>12);

select * from HemitPatientAllergy;

SELECT * FROM uspNewhemitpatientallergyRead (_allergyname => NULL,_note => NULL,_patientallergyid => '11',_allergymasterid => NULL,_patientid => '12',_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 0, _size => 0 , _orderby =>  NULL);


SELECT * FROM uspNewhemitpatientallergyRead (_allergyname => NULL,_note => NULL,_hemitpatientallergyid => '0',_hemitallergyid => NULL,_hemitpatientid => '12',_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 0, _size => 0 , _orderby =>  NULL);



CREATE OR REPLACE FUNCTION public.uspnewhemitpatientallergyreadlist(_hemitpatientallergyid text, _allergyname character varying, _hemitallergyid character varying, _note boolean, _hemitpatientid integer, _clientidin character varying, _clientidnotin character varying, _tpauserid integer, _userid bigint, _langid character varying, _page integer, _size integer, _orderby character varying)
 RETURNS SETOF json
 LANGUAGE plpgsql
AS $function$
DECLARE v_whereStatement TEXT; v_countStatement TEXT; v_queryStatement TEXT;_count INT;    
BEGIN

  IF _page=0 THEN
	  _page = 1;
	  _size = 100;
  END IF;


v_whereStatement = ''
|| CASE WHEN _hemitpatientallergyid IS NOT NULL THEN ' AND (HemitPatientAllergy.PatientAllergyId  = ANY(STRING_TO_ARRAY('||$1||', '','')::bigint[]) )'  ELSE ''  END
|| CASE WHEN _hemitallergyid IS NOT NULL THEN ' AND (hemitallergy.hemitallergyid  = ANY(STRING_TO_ARRAY('||$3||', '','')::bigint[]) )'  ELSE ''  END
|| CASE WHEN _note IS NOT NULL THEN ' AND (HemitPatientAllergy.note = '||$4||')'  ELSE ''  END
|| CASE WHEN _hemitpatientid IS NOT NULL THEN ' AND (HemitPatientAllergy.hemitpatientid = '||$5||')'  ELSE ''  END
|| ' AND ('
|| CASE WHEN _allergyname IS NOT NULL THEN ' OR (hemitallergy.name ILIKE ''%'' || '||$2||' || ''%'')' ELSE '' END 
--|| CASE WHEN _code IS NOT NULL THEN ' OR (allergy.code ILIKE ''%'' || $3 || ''%'')' ELSE '' END 
|| ')'
;
v_whereStatement = replace(v_whereStatement,' AND ( OR',' AND (');
v_whereStatement = replace(v_whereStatement,' AND ()','');


v_countStatement = CONCAT(' SELECT count(HemitPatientAllergy.hemitpatientallergyid) FROM HemitPatientAllergy WHERE 1 = 1 ',v_whereStatement);
execute v_countStatement  using 
_hemitpatientallergyid,_allergyname,_hemitallergyid,_note,_hemitpatientid,_clientidin,_clientidnotin,_tpauserid INTO _count;
  


v_queryStatement ='SELECT '||_count||' AS Count, HemitPatientAllergy.hemitpatientallergyid as id,hemitallergy.hemitallergyid , hemitallergy.name as name, HemitPatientAllergy.note as note,hemitallergy.code,HemitPatientAllergy.hemitpatientid as PatientId,HemitPatientAllergy.lastmodifieddate as lastmodifieddate
FROM HemitPatientAllergy LEFT JOIN hemitallergy ON HemitPatientAllergy.hemitallergyid = hemitallergy.hemitallergyid WHERE 1=1 ' || v_whereStatement || ' ORDER BY HemitPatientAllergy.hemitpatientallergyid'
|| CASE WHEN _page = -1 THEN '' ELSE ' LIMIT '||_size||' OFFSET '|| (_page-1)*_size END;    

 RAISE NOTICE 'sql: %', v_queryStatement; 
 v_queryStatement =  'SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) FROM ('|| v_queryStatement || ' ) A';  
 RETURN QUERY
 execute v_queryStatement using 
_hemitpatientallergyid,_allergyname,_hemitallergyid,_note,_hemitpatientid,_clientidin,_clientidnotin,_tpauserid;	

END
$function$
;

_patientallergyid
SELECT * FROM uspNewHemitPatientAllergyReadList (_allergyname => NULL,_note => NULL,_patientallergyid => NULL,_allergymasterid => NULL,_patientid => '12',_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => -1, _size => 0 , _orderby =>  NULL);


SELECT * FROM uspNewhemitpatientallergyReadList (_allergyname => NULL,_note => NULL,_patientallergyid => NULL,_allergymasterid => NULL,_patientid => '12',_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => -1, _size => 0 , _orderby =>  NULL);

SELECT * FROM uspNewhemitpatientallergyReadList (_allergyname => NULL,_note => NULL,_hemitpatientallergyid => NULL,_hemitallergyid => NULL,_hemitpatientid => '12',_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => -1, _size => 0 , _orderby =>  NULL);

SELECT * FROM uspNewhemitpatientallergyReadList (_allergyname => NULL,_note => NULL,_hemitpatientallergyid => NULL,_hemitallergyid => NULL,_hemitpatientid => '13',_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => -1, _size => 0 , _orderby =>  NULL);

SELECT * FROM uspNewhemitpatientallergyReadList (_allergyname => NULL,_note => NULL,_hemitpatientallergyid => NULL,_hemitallergyid => NULL,_hemitpatientid => '12',_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => -1, _size => 0 , _orderby =>  NULL);



CREATE or replace function uspNewHemitPatientscreate(
			_PageNumber INTEGER = 1,
  			_PageSize INTEGER = 20,
			_hemitpatientid int default null,
			_FirstName varchar default '',
			_MiddleName varchar(100) default '', 
			_LastName varchar default '',
			_Gender varchar default '',
			_SexId int default null,
			_DOB varchar default null,
			_allergyname varchar default '',
			_orderby in varchar default 'HemitPatient.hemitpatientid',
			_ordertype in varchar default 'ASC',
			_userId varchar default null,
			_langId varchar default null,
			_searchby varchar default null,
			_chartnumber varchar default null)
returns table (id bigint)

AS 
$$
declare
_initialquery varchar:='';
id integer;
sexid int;
_currentdate timestamp = current_timestamp;
begin
	--sexid= (select sex_id from HemitSex where sex=_SexId);
	--sexid=_SexId;
	select (now() at time zone 'utc') :: timestamp(3) into _currentdate;
    _initialquery:='INSERT INTO HemitPatient(firstname,lastname,chartnumber,middlename,sexid,dob,createdbyid,lastmodifiedbyid,createddate,lastmodifieddate) VALUES('''||$4||''','''||$6||''','''||$16||''','''||$5||''','||_SexId||','''||$9||'''::date,'||_userId||','||_userId||','''||_currentdate||''','''||_currentdate||''') returning hemitpatientid;' ;
    raise notice '%',_initialquery;
     return query execute _initialquery using _hemitpatientid,_FirstName,_MiddleName,_LastName,_SexId,_DOB;
    
    --return id;
 
End;
$$ language plpgsql;

select uspNewHemitPatientscreate(_FirstName=>'RIMA',_MiddleName=>'R',_LastName=>'PATEL',_SexId=>3,_DOB=>'1994-1-13');

SELECT * FROM uspNewHemitPatientsCreate (_hemitpatientid => '0',_firstname => 'KAVI', _middlename => 'S', _lastname => 'WARGHESE', _sexid => '1', _dob => '2003-01-01 00:00:00.000',_ordertype => 'ASC', _allergyname => NULL,_searchby => NULL,_userId => '1000769',_langId => '');

SELECT * FROM uspNewhemitpatientsCreate (_hemitpatientid => '0',_firstname => 'Priyas', _middlename => 'S', _lastname => 'WARGHESE', _sexid => '100071137', _dob => '2003-01-01 00:00:00.000',_searchby => NULL,_userId => '1000768',_langId => '');

SELECT * FROM uspNewhemitpatientsCreate (_hemitpatientid => '0',_firstname => 'Priyas', _middlename => 'S', _lastname => 'WARGHESE', _sexid => '100071137', _dob => '2003-01-01 00:00:00.000',_searchby => NULL,_chartnumber => 'CH00000119', _userId => '1000768',_langId => '');


SELECT * FROM uspNewhemitpatientsCreate (_hemitpatientid => '0',_firstname => 'SHREY', _middlename => 'S', _lastname => 'PARMAR', _sexid => '100071137', _dob => '2003-01-01 00:00:00.000',_searchby => NULL,_chartnumber => 'CH00000127', _userId => '1000768',_langId => '');

INSERT INTO HemitPatient(firstname,lastname,chartnumber,middlename,sexid,dob,createdbyid,lastmodifiedbyid,createddate,lastmodifieddate) VALUES('SHREY','PARMAR','CH00000127','S',100071137,'2003-01-01 00:00:00.000'::date,1000768,1000768,2023-04-10 12:27:41.215,2023-04-10 12:27:41.215) returning hemitpatientid;

SELECT * FROM uspNewhemitpatientsCreate (_hemitpatientid => '0',_firstname => 'JAY', _middlename => 'S', _lastname => 'SHARMA', _sexid => '100071137', _dob => '2003-01-01 00:00:00.000',_isactive => 'False', _searchby => NULL,_chartnumber => 'CH00000205', _userId => '1000768',_langId => '');

select * from HemitPatient;

create or replace function uspNewHemitPatientsupdate(_PageNumber INTEGER = 1,
  			_PageSize INTEGER = 20,
			_hemitpatientid int default null,
			_FirstName varchar default '',
			_MiddleName varchar(100) default '', 
			_LastName varchar default '',
			_Gender varchar default '',
			_SexId int default null,
			_DOB varchar default null,
			_allergyname varchar default '',
			_orderby in varchar default 'HemitPatient.hemitpatientid',
			_ordertype in varchar default 'ASC',
			_userId varchar default null,
			_langId varchar default null,
			_searchby varchar default null,
			_chartnumber varchar default null)
returns table (id bigint)
language plpgsql
as
$$
declare 
_initialquery varchar :='update HemitPatient set firstname = '''||$4||''',middlename='''||$5||''',lastname='''||$6||''',sexid='||$8||',dob='''||$9||''',createdbyid='||_userId||',lastmodifiedbyid='||_userId ||'where hemitpatientid='||$3||' and isdeleted=false returning hemitpatientid';
-- _updatequery varchar:= ; 
-- _selectquery varchar:= '';
 begin
     --_initialquery := _updatequery || _selectquery ||'';
     raise notice '%',_initialquery;
     return query execute _initialquery using _hemitpatientid,_FirstName,_MiddleName,_LastName,_SexId,_DOB;
 end;
$$  

select * from uspNewHemitPatientsupdate(_patientid=>4,_FirstName=>'SHRUTI',_MiddleName=>'S',_LastName=>'RANA',_SexId=>'FEMALE',_DOB=>'2002-01-01');

SELECT * FROM uspNewHemitPatientsUpdate (_patientid => '1',_firstname => 'Priya', _middlename => 'S', _lastname => 'WARGHESE', _sexid => '2', _dob => '2003-01-01 00:00:00.000',_ordertype => 'ASC', _allergyname => NULL,_searchby => NULL,_userId => '1000769',_langId => '',_chartnumber=>null);

--select * from uspNewHemitPatientsupdate(4,'SUMEET','PATEL','S','MALE','2003-01-01');
SELECT * FROM uspNewHemitPatientsUpdate (_pagesize => '0',_pagenumber => '0',_patientid => '19',_firstname => 'Priya', _middlename => 'S', _lastname => 'WARGHESE', _sexid => '3', _dob => '2003-01-01 00:00:00.000',_orderby => 'HemitPatient.hemitpatientid', _ordertype => 'ASC', _allergyname => NULL);

SELECT * FROM uspNewhemitpatientsUpdate (_hemitpatientid => '12',_firstname => 'KUNJ', _middlename => 'S', _lastname => 'CHOPDA', _sexid => '100071137', _dob => '2003-01-01 00:00:00.000',_isactive => 'False', _searchby => NULL,_chartnumber => 'CH00000205', _userId => '1000768',_langId => '');

select * from HemitPatient;


CREATE or replace function uspNewHemitPatientAllergycreate(
_hemitpatientid INT, 
_hemitallergyid INT, 
_note varchar(100),
_allergyname varchar(100) default null,
_hemitpatientallergyid int default null,
_userId varchar default null,
			_langId varchar default null
)
returns INT 

AS 
$$
declare
primarykey integer;
BEGIN
    INSERT INTO HemitPatientAllergy(hemitpatientid,hemitallergyid,note) VALUES(_hemitpatientid,_hemitallergyid,_note) returning hemitpatientallergyid into primarykey; 
    return primarykey;
--   (SELECT patient_id FROM Patients ORDER BY created_on DESC LIMIT 1);  
End;
$$ language plpgsql;


select uspNewHemitPatientAllergycreate(2,1,'bad');

SELECT * FROM uspNewHemitPatientAllergycreate ( _patientid =>12,_allergyname => NULL,_note => 'LATEX added', _patientallergyid => NULL,_allergymasterid => '11');


SELECT * FROM uspNewhemitpatientallergyCreate (_allergyname => NULL,_note => 'PEANUT added again', _patientallergyid => '0',_allergymasterid => '11',_patientid => '12',_userId => '1000768',_langId => '')

select * from HemitPatientAllergy;

SELECT * FROM uspNewhemitpatientallergyCreate (_allergyname => NULL,_note => 'PEANUT added again', _hemitpatientallergyid => '0',_hemitallergyid => '11',_hemitpatientid => '12',_userId => '1000768',_langId => '')



CREATE or replace function uspNewHemitPatientAllergyupdate(
_hemitpatientid INT default null, 
_hemitallergyid INT default null, 
_note varchar(100) default null,
_allergyname varchar(100) default null,
_hemitpatientallergyid int default null,
_userId varchar default null,
			_langId varchar default null
)
returns table (id bigint)

AS 
$$
declare 
createdkey integer;
_initialquery varchar :='update HemitPatientAllergy set hemitallergyid=(select hemitallergyid from HemitAllergy where name = '''||$4||'''),Note='''||$3||''' where hemitpatientid='||$1||' and hemitpatientallergyid='||$5||' returning hemitpatientallergyid';
-- _updatequery varchar:= ; 
-- _selectquery varchar:= '';
 begin
     --_initialquery := _updatequery || _selectquery ||'';

    raise notice '%',_initialquery;
    return query execute _initialquery using _hemitpatientid,_hemitallergyid,_note,_allergyname,_hemitpatientallergyid;
    
 end;
$$ language plpgsql;

select * from uspNewHemitPatientAllergyupdate(_patientid=>12,_allergyname=>'MILK',_note=>'updatedby',_patientallergyid=>13);

SELECT * FROM uspNewHemitPatientAllergyUpdate ( _patientid =>1,_allergyname => 'LATEX',_note => 'updated2 from new again', _patientallergyid => '1',_allergymasterid => NULL);

SELECT * FROM uspNewHemitPatientAllergyupdate ( _patientid =>2,_allergyname => 'LATEX',_note => 'updated2 from new again', _patientallergyid => '4',_allergymasterid => NULL)

SELECT * FROM uspNewhemitpatientallergyUpdate (_allergyname => 'MILK',_note => 'updated2', _patientallergyid => '14',_allergymasterid => NULL,_patientid => '12',_userId => '1000768',_langId => '');

SELECT * FROM uspNewhemitpatientallergyUpdate (_allergyname => 'PEANUT',_note => 'updated2peanut', _hemitpatientallergyid => '0',_hemitallergyid => NULL,_hemitpatientid => '12',_userId => '1000768',_langId => '');

CREATE or replace function uspNewHemitPatientAllergydelete(

_hemitpatientallergyid int default null,
_userId varchar default null,
			_langId varchar default null,
			_lastmodifieddate varchar default null,
			_clientid varchar default null,
			_machineid varchar default null,
			_oldsystemid varchar default null,
			_requestid varchar default null,
			_issample varchar default null
)
returns table (
                id bigint
                
)

AS 
$$
declare
deletedkey integer;
_query varchar :='';
 --_query varchar:= 'update HemitPatientAllergy set isdeleted=true'; 
 
 begin
     _query := 'update HemitPatientAllergy set isdeleted=true where hemitpatientallergyid='||$1||' returning hemitpatientallergyid';
     raise notice '%',_query;
    return query execute _query using _hemitpatientallergyid;
 end;
$$ language plpgsql;

select * from uspNewHemitPatientAllergydelete(_hemitpatientallergyid=>11);

SELECT * FROM uspNewhemitpatientallergyDelete (_hemitpatientallergyid => '11',_lastmodifieddate => '0001-01-01 00:00:00.000',_clientid => '10007',_machineid => '::1',_oldsystemid => NULL,_issample => 'false',_requestid => '4ad29f88-00d3-4f21-9b49-746b9e35f610',_userId => '1000768',_langId => '');

select * from HemitPatientAllergy;
select * from HemitPatient;

SELECT * FROM uspNewhemitpatientsRead (_patientid => '12',_firstname => NULL,_middlename => NULL,_lastname => NULL,_sexid => '0', _dob => NULL,_searchby => NULL,_clientidin => '10007',_clientidnotin => NULL,_tpauserid => NULL,_userId => '1000768',_langId => '', _page => 0, _size => 0 , _orderby =>  NULL);